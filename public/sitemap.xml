<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
    
    <url>
        <loc>http://example.com/2022/11/22/think-of-javascript/</loc>
        
        <lastmod>2022-12-10T10:51:56.543Z</lastmod>
        
        <date>1669101986000</date>
        <title>think of javascript | wtw's Frontend</title>
        
        <desc>jscompose ES5 12345678function compose() &#123; var args = Array.prototype.slice.call(arguments); return function (x) &#123; return args.reduceRight(function (a, b) &#123; return b(a); &#125;, x); &#1</desc>
    </url>
    
    <url>
        <loc>http://example.com/2022/11/26/think-of-algorithm/</loc>
        
        <lastmod>2022-12-09T17:35:33.374Z</lastmod>
        
        <date>1669460260000</date>
        <title>think of algorithm | wtw's Frontend</title>
        
        <desc>算法排序 冒泡排序 1234567891011121314function bubbleSort(array) &#123; const result = [...array], length = result.length; for (let i = 0; i &lt; length; i++) &#123; for (let j = 0; j &lt; length - i; j++) &#1</desc>
    </url>
    
    <url>
        <loc>http://example.com/2022/10/25/javascript-outline/</loc>
        
        <lastmod>2022-12-09T16:43:08.127Z</lastmod>
        
        <date>1666669286000</date>
        <title>javascript outline | wtw's Frontend</title>
        
        <desc>javascript outlineES6var 变量提升(会提前分配栈空间内存,用于存储基本类型数据或者引用类型指针) 重复声明 全局作用域绑定 let、const 不再拥有 var 的缺陷特性 TDZ(临时死区) 块级作用域绑定 let 变量声明 const 常量声明 优先声明最佳实践</desc>
    </url>
    
    <url>
        <loc>http://example.com/2022/11/17/think-of-react/</loc>
        
        <lastmod>2022-12-06T07:19:37.932Z</lastmod>
        
        <date>1668656939000</date>
        <title>think of react | wtw's Frontend</title>
        
        <desc>react特性 数据驱动 JSX 语法糖动态声明更加灵活 Virtual DOM 与 Diff 算法配合使用,可保证性能 Fiber 的任务调度和数据结构令 react 的性能更出色 基于 class 生命周期 创建阶段 constructor: 初始化 getDerivedStateFromProps: 合并组件外的 props 至组件内 state,不推荐使用 render: react 组件</desc>
    </url>
    
    <url>
        <loc>http://example.com/2022/08/30/think-of-nodejs/</loc>
        
        <lastmod>2022-12-02T08:29:38.947Z</lastmod>
        
        <date>1661856210000</date>
        <title>think of nodejs | wtw's Frontend</title>
        
        <desc>nodejs本 nodejs 概念 Nodejs 是一个基于 Chrome V8 引擎的 Javascript 运行环境 特性 事件驱动 非阻塞 I/O 非阻塞 I/O 实际上就是系统在接收输入与输出之间时,还可以继续处理其他输入 规范 nodejs 中的内置模块基本都遵从回调函数 callback(err, result) 的形式</desc>
    </url>
    
    <url>
        <loc>http://example.com/2022/08/30/think-of-webpack/</loc>
        
        <lastmod>2022-11-29T15:39:54.083Z</lastmod>
        
        <date>1661847446000</date>
        <title>think of webpack | wtw's Frontend</title>
        
        <desc>webpackwebpack-cli 作用 引入 yargs,对命令行实行定制 分析命令行参数,对各个参数实行转换,组成编译配置项 导入 webpack,根据编译配置项进行编译和构建 entry 作用 作为 webpack 构建打包的入口,搜索全局资源的起点. 属性值 为何设置 entry 的属性值必须为相对路径,而绝对路径却会报错? 解: entry 是 webpack 构建打包的入口,是搜索全</desc>
    </url>
    
    <url>
        <loc>http://example.com/2022/11/21/think-of-css/</loc>
        
        <lastmod>2022-11-29T06:09:29.277Z</lastmod>
        
        <date>1669032080000</date>
        <title>think of css | wtw's Frontend</title>
        
        <desc>css水平居中对于父子关系的布局，如何让子元素居中就是一个课题~ text-align + inline-block 1234567 .parent &#123; text-align: center;&#125;.children &#123; display: inline-block;&#125; absolute + transform(translate) 123456789 .pare</desc>
    </url>
    
    <url>
        <loc>http://example.com/2022/11/24/think-of-browser/</loc>
        
        <lastmod>2022-11-29T05:04:10.392Z</lastmod>
        
        <date>1669251373000</date>
        <title>think of browser | wtw's Frontend</title>
        
        <desc>browserprocess 分析 浏览器的进程 浏览器进程 渲染进程 GUI 线程: 用于处理解析渲染 html、css JS 线程: 也就是程序员所说的所谓 “JS 单线程” 定时器线程: 处理定时器(setTimeout、setInterval),将符合条件的回调事件移入至事件触发线程 事件触发线程: Event Loop 事件循环执行机制 异步 HTTP 请求线程: 处理 http 请求,</desc>
    </url>
    
    <url>
        <loc>http://example.com/2022/08/30/daily-problems/</loc>
        
        <lastmod>2022-11-27T09:59:26.523Z</lastmod>
        
        <date>1661856794000</date>
        <title>daily problems | wtw's Frontend</title>
        
        <desc>npm npm run scripts 为何 npm 执行 package.json 中的 scripts 命令时,即使全局环境变量下不存在的脚本命令也能执行? 解: 首先 npm run package.json 中的 scripts 脚本命令时,会新建一个 shell 脚本,并将 scripts 中的脚本命令放入其中执行,因此 shell 命令(一般是 bash)完全可以执行;其次,shell</desc>
    </url>
    
    <url>
        <loc>http://example.com/2022/11/22/think-of-v8/</loc>
        
        <lastmod>2022-11-22T01:51:15.774Z</lastmod>
        
        <date>1669081205000</date>
        <title>think of v8 | wtw's Frontend</title>
        
        <desc>v8 垃圾回收机制 使用分代回收策略,分为新、老生代. 新生代: 新生代的堆内存被分为多个 Semispace,每个 Semispace 分为两部分 from 和 to,分配对象空间时,只在 from 中分配,to 是闲置的,垃圾回收机制会按照以下步骤: 查找 from 中还存活的对象,将其全部移入到 to 反转 from 和 to 对 to 尽数回收 新生代 -&gt; 老生代 新生代垃圾回收机</desc>
    </url>
    
    <url>
        <loc>http://example.com/2022/10/15/think-of-tapable/</loc>
        
        <lastmod>2022-11-08T16:48:46.718Z</lastmod>
        
        <date>1665770437000</date>
        <title>think of tapable | wtw's Frontend</title>
        
        <desc>Tapable 什么是 Tapable 简单来说,类似于 EventEmitter 的一种发布订阅模式,也就是观察者模式,但不同的是,Tapable 的流程以及应用场景要广泛复杂的多.Tapable 作为 Webpack 的主要骨架而流行,因此也受到前端开发爱好者的研究. 订阅模式类型 —— Hook 在 Tapable 中订阅模式类型被称为 Hook,也就是 “钩子”,基本分为四种. 普通钩子 </desc>
    </url>
    
    <url>
        <loc>http://example.com/2022/10/14/create-simplepack/</loc>
        
        <lastmod>2022-11-07T18:00:24.443Z</lastmod>
        
        <date>1665749085000</date>
        <title>create Simplepack | wtw's Frontend</title>
        
        <desc>create Simplepack搭建一个简易的 webpack —— Simplepack. 配置文件 12345678910111213141516// simplepack.config.jsconst &#123;resolve&#125; = require(&#x27;path&#x27;);const OUTPUT_DIR = resolve(process.cwd(), &#x27</desc>
    </url>
    
    <url>
        <loc>http://example.com/2022/09/20/unresolved-problems/</loc>
        
        <lastmod>2022-09-20T19:53:53.348Z</lastmod>
        
        <date>1663635199000</date>
        <title>unresolved problems | wtw's Frontend</title>
        
        <desc>webpackspeed-measure-webpack-plugin 为何 speed-measure-webpack-plugin 速度分析插件对于 webpack 5.x 的支持很有限制,如何完美的解决这些限制? 现阶段并没有发现解决的最完美的方式, speed-measure-webpack-plugin 速度分析插件对于 webpack 5.x 会出现以下两个问题: 使用 .wrap 包</desc>
    </url>
    
    <url>
        <loc>http://example.com/2022/08/30/hexo-next/</loc>
        
        <lastmod>2022-09-02T07:01:47.811Z</lastmod>
        
        <date>1661845867000</date>
        <title>hexo next | wtw's Frontend</title>
        
        <desc>引言此博客用于搭建 hexo next 主题的字典工具类博客.基本不会探索深究配置的原因,敬请知悉~ hexo 安装 步骤 首先要用 npm 资源依赖管理工具安装全局命令 hexo-cli. npm install hexo-cli -g 然后使用 hexo 初始化博客目录,比如 blog 目录,目录名要与后续个人建立的 github 上 hexo 托管代码的 repository 库同名. he</desc>
    </url>
    
    <url>
        <loc>http://example.com/archives/index.html</loc>
        
        <lastmod>2022-08-30T07:22:40.268Z</lastmod>
        
        <date>1661843883000</date>
        <title>归档 | wtw's Frontend</title>
        
        <desc></desc>
    </url>
    
    <url>
        <loc>http://example.com/tags/index.html</loc>
        
        <lastmod>2022-08-30T07:22:02.195Z</lastmod>
        
        <date>1661843865000</date>
        <title>标签 | wtw's Frontend</title>
        
        <desc></desc>
    </url>
    
    <url>
        <loc>http://example.com/categories/index.html</loc>
        
        <lastmod>2022-08-30T07:21:28.125Z</lastmod>
        
        <date>1661843891000</date>
        <title>分类 | wtw's Frontend</title>
        
        <desc></desc>
    </url>
    
    <url>
        <loc>http://example.com/about/index.html</loc>
        
        <lastmod>2022-08-30T07:20:26.298Z</lastmod>
        
        <date>1661843874000</date>
        <title>关于 | wtw's Frontend</title>
        
        <desc></desc>
    </url>
    
</urlset>
<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>daily problems</title>
    <url>/2022/08/30/daily-problems/</url>
    <content><![CDATA[<h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><blockquote>
<p>npm run scripts</p>
</blockquote>
<p>  为何 npm 执行 package.json 中的 scripts 命令时,即使全局环境变量下不存在的脚本命令也能执行?</p>
<p>  解: 首先 npm run package.json 中的 scripts 脚本命令时,会新建一个 shell 脚本,并将 scripts 中的脚本命令放入其中执行,因此 shell 命令(一般是 bash)完全可以执行;其次,shell 命令执行时,node_modules/.bin 子目录下的所有可执行脚本命令会放入至 $PATH 全局环境变量中,等到 shell 命令执行完毕,$PATH 才会恢复原样.最后 node_modules/.bin 子目录下的所有可执行脚本命令实际上是与 node_modules 下可执行模块建立了软链接的,因此在 node 此类项目下,即使全局环境变量下不存在的脚本命令,依然可以通过 node_modules 中的可执行模块在当前项目下转化执行.</p>
<p>  线性图: node_modules/(可执行模块) -&gt; 通过软链接 =&gt; node_modules/.bin/(可执行脚本命令) -&gt; 通过 shell 脚本命令执行(添加至 $PATH 全局环境变量) =&gt; 即使全局环境变量下不存在的脚本命令也能执行.</p>
]]></content>
      <categories>
        <category>problems</category>
      </categories>
      <tags>
        <tag>problems</tag>
      </tags>
  </entry>
  <entry>
    <title>think of nodejs</title>
    <url>/2022/08/30/think-of-nodejs/</url>
    <content><![CDATA[<h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1>]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo next</title>
    <url>/2022/08/30/hexo-next/</url>
    <content><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p><b>此博客用于搭建 hexo next 主题的字典工具类博客.基本不会探索深究配置的原因,敬请知悉~</b></p>
<h1 id="hexo-安装"><a href="#hexo-安装" class="headerlink" title="hexo 安装"></a>hexo 安装</h1><blockquote>
<p>步骤</p>
</blockquote>
<p>  首先要用 npm 资源依赖管理工具安装全局命令 hexo-cli.</p>
<pre><code>npm install hexo-cli -g
</code></pre>
<p>  然后使用 hexo 初始化博客目录,比如 blog 目录,目录名要与后续个人建立的 github 上 hexo 托管代码的 repository 库同名.</p>
<pre><code>hexo init blog
</code></pre>
<p>  接着 github 建库: 建立一个以 w-t-w(我的账号).github.io 结尾的 repository 库,作为 hexo 托管代码的库, github 默认 .github.io 结尾作为用户的网站二级域名,建立一个新的分支作为创作分支(因为主分支是用来发布呈现网站的); 之后,进入生成的 blog 文件夹,在本地添加与远程 repository 库链接关联的句柄简称,并设置本地句柄简称推送/同步远程库上游的分支,与远程库建立安全关联,最后同步远程最新资源.</p>
<pre><code>git remote add origin git@github.com:w-t-w/w-t-w.github.io.git
git pull --set-upstream origin master
</code></pre>
<p>  再 npm 下载外部资源依赖包.</p>
<pre><code>npm i/npm install
</code></pre>
<p>  或者使用 yarn 下载外部资源依赖包.</p>
<pre><code>yarn
</code></pre>
<p>  最后启动 hexo 自身搭建的服务,生成本地的博客网站服务,默认端口在本地 ip 地址下的 4000 端口,假如你不想启动在 4000 端口,也可使用-p 其他端口号进行配置,比如-p 9777.</p>
<pre><code>hexo server
hexo server -p 9777
</code></pre>
<p>  PS: 最好先将本地代码上传至远程之后,再执行 hexo 配置.</p>
<pre><code>git add .
git commit &#39;build:hexo next&#39;
git push
</code></pre>
<p>  默认的主题风格 theme 是 landscape ,假如你想更换,可以通过<a href='https://hexo.io/themes/'>https://hexo.io/themes</a>进行筛选,筛选之后进行配置,主题配置见下文.</p>
<h1 id="hexo-配置"><a href="#hexo-配置" class="headerlink" title="hexo 配置"></a>hexo 配置</h1><p>PS: 以下所说的”根目录”指的就是当前创作的 repository 目录,”主题目录”就是根目录下/themes目录下的主题环境.</p>
<h4 id="hexo-deploy-发布配置"><a href="#hexo-deploy-发布配置" class="headerlink" title="hexo deploy 发布配置"></a>hexo deploy 发布配置</h4><p>发布部署可以部署至 Github Page 个人网站,也可以部署至个人申请购买的云服务器中.</p>
<p>一. 部署至 Github Page 个人网站.</p>
<blockquote>
<p>步骤</p>
</blockquote>
<p>要想部署到 Github Page 个人网站,首先要下载 hexo-deployer-git 插件.</p>
<pre><code>npm install hexo-deployer-git --save
</code></pre>
<p>然后在根目录底下的 _config.yml 文件中更改 deploy 发布配置,将 source 目录下面的内容进行构建发布到 repository github 地址的主分支上.</p>
<pre><code>deploy:
    type: git
    #你的个人网站 github 库的链接地址,最好使用 git@ 开头的, https@ 开头的会报错
    repo: git@github.com:w-t-w/w-t-w.github.io.git
    #分支名
    branch: master
</code></pre>
<p>二. 部署至个人申请购买的云服务器.</p>
<blockquote>
<p>步骤</p>
</blockquote>
<p>  将生成的网站博客项目直接通过 Royal TSX 远程链接管理工具放入云服务器中,链接成功后,下载 nginx 代理.</p>
<pre><code>#我这里直接使用阿里云CentOS服务器中默认的基于RPM的软件包管理器yum来下载nginx
yum install nginx
</code></pre>
<p>  下载之后查看全局命令 nginx 是否存在,查看 nginx 的版本.</p>
<pre><code>nginx -v
</code></pre>
<p>  如果全局命令不存在 nginx,则运行 source ~/.bash_profile,使得配置在修改了环境变量的情况下进行重置.</p>
<pre><code>source ~/.bash_profile
</code></pre>
<p>  启动 nginx.</p>
<pre><code>nginx
</code></pre>
<ul>
<li><p>顺便提一下 nginx 的其他命令.重启 nginx.</p>
<pre><code>nginx -s reload
</code></pre>
</li>
<li><p>停止 nginx.</p>
<pre><code>nginx -s stop
</code></pre>
</li>
<li><p>通过流(pipe)查询全部用户组 nginx 完整的进程状态.</p>
<pre><code>ps -ef | grep nginx
</code></pre>
</li>
<li><p>强制杀掉 nginx 进程.</p>
<pre><code>#28009是 nginx 进程号,通过 ps -ef | grep nginx 可以查询到
kill -9 28009
</code></pre>
</li>
</ul>
<p>  配置 nginx,将服务器代理 root 页面指向我们的博客网站.</p>
<pre><code>#通过测试 nginx,查询 nginx 配置文件所在目录
nginx -t
vim /etc/nginx/nginx.conf
</code></pre>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">...</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    #域名配置,需要申请购买备案(国内域名需要备案,国外域名则不需要)</span><br><span class="line">    server_name  _;</span><br><span class="line">    #修改root页面向我们的网站博客项目</span><br><span class="line">    root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">    # Load configuration files for the default server block.</span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">...</span></span><br></pre></td></tr></table></figure>

<h4 id="hexo-theme-主题配置"><a href="#hexo-theme-主题配置" class="headerlink" title="hexo theme 主题配置"></a>hexo theme 主题配置</h4><blockquote>
<p>示例</p>
</blockquote>
<p>筛选好个人选中的主题之后,就需要在项目里面进行配置更换。首先需要下载远程 github 库里面的主题项目到项目根目录里面的 themes 文件夹底下,比如本人用的是 next 主题的 hexo.</p>
<pre><code># 注意 hexo 6.x 之前下载 next 主题远程 github 链接与 hexo 6.x 之后不同!
# hexo 6.x 之前
git clone https://github.com/iissnan/hexo-theme-next.git themes/next
# hexo 6.x 之后
git clone https://github.com/theme-next/hexo-theme-next themes/next
</code></pre>
<p>随后在根目录里面的 _config.yml 文件中更改 theme 配置.</p>
<pre><code>theme: next
</code></pre>
<p>接着选择主题展示的方式,需要在主题目录下,在 _config.yml 文件中更改 Scheme 配置,比如 next 主题底下的 Scheme 配置.</p>
<pre><code>scheme:
    #scheme: Muse
    #scheme: Mist
    scheme: Pisces
    #scheme: Gemini
</code></pre>
<h4 id="hexo-language-语言配置"><a href="#hexo-language-语言配置" class="headerlink" title="hexo language 语言配置"></a>hexo language 语言配置</h4><blockquote>
<p>步骤</p>
</blockquote>
<p>每个主题的语言都是根据博客作者的母语来配置的,要想配置开发者个人国家的语言,还是在项目根目录底下的 _config.yml 文件中更改 language 配置.</p>
<pre><code>language: zh-CN
</code></pre>
<p>再在主题目录底下的 _config.yml 文件中更改 language 配置.</p>
<pre><code>language: zh-CN
</code></pre>
<h4 id="hexo-page-页面配置"><a href="#hexo-page-页面配置" class="headerlink" title="hexo page 页面配置"></a>hexo page 页面配置</h4><blockquote>
<p>步骤</p>
</blockquote>
<p>hexo 提供了几个可供筛选的页面,常用的有这么几个：home(首页)、tags(标签)、about(关于我)、archives(档案)和categories(分类),首先要创建页面.</p>
<pre><code>hexo new page tags
hexo new page about
hexo new page archives
hexo new page categories
</code></pre>
<p>接着在主题目录下,在 _config.yml 文件中更改 menu 配置,当然每个主题的配置不尽相同.</p>
<pre><code>menu:
    home: / || fa fa-home
    about: /about/ || fa fa-user
    tags: /tags/ || fa fa-tags
    categories: /categories/ || fa fa-th
    archives: /archives/ || fa fa-archive
</code></pre>
<p>随后更改 source 目录底下创建的页面配置,以 tags 为例.</p>
<pre><code>----------------------------
    title: 标签
    date: 2018-04-24 17:57:26
    type: &quot;tags&quot;
    comments: false
----------------------------
</code></pre>
<h4 id="hexo-avatar-头像配置"><a href="#hexo-avatar-头像配置" class="headerlink" title="hexo avatar 头像配置"></a>hexo avatar 头像配置</h4><blockquote>
<p>步骤</p>
</blockquote>
<p>配置个人博客网站的头像,需要更改主题目录底下的 _config.yml 文件,添加 avatar 配置.</p>
<pre><code>#头像url链接
avatar: https://avatars.githubusercontent.com/u/112366447?v=4
</code></pre>
<h4 id="hexo-search-全站搜索配置"><a href="#hexo-search-全站搜索配置" class="headerlink" title="hexo search 全站搜索配置"></a>hexo search 全站搜索配置</h4><blockquote>
<p>步骤</p>
</blockquote>
<p>假如想要配置 hexo 个人博客网站的全站搜索配置,首先要下载 hexo search 外部依赖包.</p>
<pre><code>npm install hexo-generator-search --save
npm install hexo-generator-searchdb --save
</code></pre>
<p>更改根目录底下的 _config.yml 文件,添加 search 配置.</p>
<pre><code>search:
    path: search.xml
    field: post
    format: html
    limit: 10000
</code></pre>
<p>开启主题目录底下的 _config.yml 文件中的 local_search 配置.</p>
<pre><code>local_search:
    enable: true
</code></pre>
<h4 id="hexo-博客文件配置"><a href="#hexo-博客文件配置" class="headerlink" title="hexo 博客文件配置"></a>hexo 博客文件配置</h4><blockquote>
<p>步骤</p>
</blockquote>
<p>假如想要更改每一篇博客的文件名称,不再是默认的:title.md的文件名,需要在根目录底下的 _config.yml 文件中更改 new_post_name 配置.</p>
<pre><code>new_post_name: :year-:month-:day-:title.md
</code></pre>
<h4 id="hexo-auto-excerpt-阅读全文配置"><a href="#hexo-auto-excerpt-阅读全文配置" class="headerlink" title="hexo auto_excerpt 阅读全文配置"></a>hexo auto_excerpt 阅读全文配置</h4><blockquote>
<p>步骤</p>
</blockquote>
<p>博客文章一般都会很长的,所以在首页要对博客进行超长省略,要想看所有的内容,点击阅读全文或者文章标题进入全文查看.在 hexo-theme-next 主题版本 7.6 之前需要再主题目录底下的 _config.yml 文件中更改 auto_excerpt 配置.</p>
<pre><code>auto_excerpt:
    enable: true
    length: 200
</code></pre>
<p>在 hexo-theme-next 主题版本 7.6 之后,由于 auto_excerpt 这种超长省略不应该是主题插件应该做的,作者将此配置移除,并给出新的专门针对此配置的插件 <a href='https://github.com/chekun/hexo-excerpt'>hexo-excerpt</a>.</p>
<p><img src="https://image.white-than-wood.zone/hexo/remove_auto_excerpt.png"></p>
<pre><code>excerpt:
    #显示的 markdown 代码块层数
    depth: 5
    excerpt_excludes: []
    more_excludes: []
    #设置为true: 显示超长省略,只展示部分,隐藏全文
    #设置为false: 展示全文
    hideWholePostExcerpts: true
    excerpt_description: true
    #是否显示阅读全文按钮
    read_more_btn: true
</code></pre>
<h4 id="hexo-browsersync-热加载配置"><a href="#hexo-browsersync-热加载配置" class="headerlink" title="hexo browsersync 热加载配置"></a>hexo browsersync 热加载配置</h4><blockquote>
<p>步骤</p>
</blockquote>
<p>在创作博客时,需要每次手动刷新页面才能看到修改后的结果,感觉非常没有效率,如果存在类hrm热加载这种插件就太爽了! <a href='https://github.com/hexojs/hexo-browsersync'>hexo-browsersync</a> 可以直接解决这个问题.</p>
<pre><code>npm install hexo-browsersync --save
</code></pre>
<p>此插件原理基于 browser-sync ,与 hexo 建立关联,当创作的文件内容发生改变时, browser-sync 就会监听到并刷新浏览器整个页面的内容,做到不需手动刷新,大大提高了创作效率.</p>
<pre><code>#更改根目录底下的 _config.yml 文件,添加 browsersync 属性
#设置监听 watch 属性为 true 就可以了!
browsersync:
    watch: true
    logLevel: &quot;warn&quot;
</code></pre>
<h4 id="hexo-busuanzi-count-卜算子统计配置"><a href="#hexo-busuanzi-count-卜算子统计配置" class="headerlink" title="hexo busuanzi_count 卜算子统计配置"></a>hexo busuanzi_count 卜算子统计配置</h4><blockquote>
<p>步骤</p>
</blockquote>
<p>上线之后,需要对个人博客进行管理,阅读人数以及次数对于创作者来说是很重要反馈点.统计配置需要更改主题目录底下的 _config.yml 文件,配置 busuanzi_count 卜算子统计.</p>
<pre><code>#可配置查看个人博客的阅读人数、次数以及每篇博客文章的次数
busuanzi_count:
    enable: true
    total_visitors: true
    total_visitors_icon: fa fa-user
    total_views: true
    total_views_icon: fa fa-eye
    post_views: true
    post_views_icon: fa fa-eye
</code></pre>
<h4 id="hexo-baidu-analytics百度统计配置"><a href="#hexo-baidu-analytics百度统计配置" class="headerlink" title="hexo baidu_analytics百度统计配置"></a>hexo baidu_analytics百度统计配置</h4><blockquote>
<p>步骤</p>
</blockquote>
<p>卜算子统计有时候会出现一些异常,比如pv莫名会加100,uv不再区分单个ip.为了追求更精确、更智能,我们采用百度统计. 统计配置需要更改主题目录底下的 _config.yml 文件,配置 baidu_analytics 百度统计.</p>
<p>根据<a href='https://tongji.baidu.com/main/setting/10000339309/home/site/getjs?siteId=18040501'>百度统计-使用配置-代码获取</a>,将 hm.js 后方自动生成的 id 配置至 baidu_analytics.</p>
<p><img src="https://image.white-than-wood.zone/hexo/baidu_analytics.png"></p>
<pre><code># Baidu Analytics
# See: https://tongji.baidu.com
baidu_analytics: 31f07c2ec89d10385ec28e8eea5bbc3a
</code></pre>
<h4 id="hexo-其他配置"><a href="#hexo-其他配置" class="headerlink" title="hexo 其他配置"></a>hexo 其他配置</h4><blockquote>
<p>示例</p>
</blockquote>
<p>在根目录底下的 _config.yml 文件中更改网站title(标题)、author(作者)、keywords(关键字)、description(描述)配置,比如本人的配置.</p>
<pre><code>title: wtw&#39;s Frontend
author: wtw(比木白)
keywords: hexo,hexo blog,webpack
subtitle: 道阻且长,行则将至
description: 前端领域内所不知道的都探索于此!
</code></pre>
<p>再主题目录底下的 _config.yml 文件重设置个人的github(github托管代码网址)、google(google个人资料网址)、gmail(gmail邮箱网址)、twitter(twitter个人微博网址)等等,比如本人的配置.</p>
<pre><code>social:
  GitHub: https://github.com/w-t-w || fab fa-github
  E-Mail: https://dreamthen.00@gmail.com || fab fa-envelope
  Google: https://plus.google.com/u/0/103833130011211353424 || fab fa-google
</code></pre>
<p>发布到 GitHub Page 上之后,你会发现 README.md 莫名的消失,主要是因为 hexo 构建发布到远程的目录只是 source 目录,所以只要将 README.md copy 一份放到 source 目录下,并且配置渲染时需要跳过的文件就可以了.</p>
<pre><code>#hexo 构建渲染时会将 source 目录下 markdown 类型文件转译为 html,我们不需要将 README.md 转译,所以直接 skip render
#更改根目录底下的 _config.yml 文件,修改 skip_render 属性
skip_render: README.md
</code></pre>
<p>当创作中图片过小,阅读者无法看清的情况下,放大配置就已然成为必要 .fancybox 配置可以点击使图片放大,并可同时查看全文的图片.更改主题目录下的 _config.yml 文件 fancybox 属性.</p>
<pre><code># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.
# For more information: https://fancyapps.com/fancybox/
fancybox: true
</code></pre>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>hexo blog</tag>
      </tags>
  </entry>
  <entry>
    <title>think of webpack</title>
    <url>/2022/08/30/think-of-webpack/</url>
    <content><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><h4 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h4><blockquote>
<p>属性值</p>
</blockquote>
<p>  为何设置 entry 的属性值必须为相对路径,而绝对路径却会报错?</p>
<p>  解: entry 是 webpack 构建打包的入口,是搜索全局资源的起点,它的属性值是设置为相对于整个项目而言的,也就是当前项目根目录,在 webpack context 属性不变的情况下, entry 属性值永远相对于当前项目根目录,当然如若 context 属性发生改变,entry 是可以设置绝对路径的,因为 webpack 所作用的构建打包项目根目录发生了改变. </p>
<h4 id="loaders"><a href="#loaders" class="headerlink" title="loaders"></a>loaders</h4><blockquote>
<p>babel-loader</p>
</blockquote>
<p>  @babel/preset-env 的参数 modules 的作用是什么?</p>
<p>  解: modules =&gt; 通过 babel 转化的模块导出是否为其他类型,默认模块导出为 ‘EsModules’,其他类型如 ‘commonjs’,’commonjs2’,’amd’ 等,设置为 false 表明不改变模块导出类型.</p>
<p>  @babel/preset-env 的参数 loose 的作用是什么?</p>
<p>  解: loose =&gt; 通过 babel 转化是否开启松散模式.</p>
<ul>
<li><p>何为 loose 松散模式?</p>
<p>解: babel 在转换时一般有两种转换模式: 松散模式(loose)与标准模式(normal),松散模式会转换为前端开发者最熟悉的简洁的 ES5 代码,而标准模式转换出的代码则更贴近 ES6 的语义.</p>
</li>
<li><p>loose 松散模式的优缺点?</p>
<ul>
<li>优点: 转换出的代码更加易读,体积更小,执行效率更高,对于老浏览器兼容性更好.</li>
<li>缺点: 对于原生 ES6 语法的代码转换时经常会出现问题.</li>
<li>总结: 基本上在使用时不会开启 loose 松散模式.</li>
</ul>
</li>
</ul>
<blockquote>
<p>css-loader</p>
</blockquote>
<p>  为何 css-loader options 参数 minimize 压缩功能失效?</p>
<p>  解: 通过查询,webpack 3.x =&gt; 4.x &amp;&amp; css-loader 0.x =&gt; 1.x 已经将 options minimize 参数压缩功能删掉.</p>
<blockquote>
<p>url-loader</p>
</blockquote>
<p>  url-loader 与 file-loader 的区别是什么?</p>
<p>  解: url-loader 与 file-loader 在处理文件资源功能上面并没有很大的区别,url-loader 中是引用了 file-loader 的,但是 url-loader 根据参数限制能够转化为更小的文件资源,比如图片 Base64.</p>
<blockquote>
<p>Asset Module</p>
</blockquote>
<p>  webpack 5.x 中对于资源模块的处理进行了升级优化,无需额外配置即可处理资源文件(字体，图标等).</p>
<p>  资源模块类型(asset module type),通过添加 4 种新的模块类型,来替换所有这些 loader:</p>
<ul>
<li>asset/resource 发送一个单独的文件并导出 URL.之前通过使用 file-loader 实现.</li>
<li>asset/inline 导出一个资源的 data URI.之前通过使用 url-loader 实现.</li>
<li>asset/source 导出资源的源代码.之前通过使用 raw-loader 实现.</li>
<li>asset 在导出一个 data URI 和发送一个单独的文件之间自动选择.之前通过使用 url-loader,并且配置资源体积限制实现.</li>
</ul>
<p>  asset 实际上可以理解为比较通用灵活的配置,通常开发时基本上使用 type: ‘asset’.</p>
<ul>
<li><p>generator</p>
<p>在配置 module.rules 时,可配置 generator 来对资源模块处理进行进一步控制,该配置有以下几个属性:</p>
<ul>
<li><p>filename</p>
<ul>
<li>值必须为相对路径,可改变资源输出的目录;</li>
<li>如果同时指定了该属性和 output.assetModuleFilename,将忽略 output.assetModuleFilename 的值;</li>
</ul>
</li>
<li><p>dataUrl</p>
<ul>
<li>在处理 inline 类型的资源时,该资源默认对资源进行 base64 编码,可通过该属性来改变其编码方式;</li>
<li>该属性值为函数,其签名为 (content: string) =&gt; string;</li>
<li>该属性仅适用于 asset 和 asset/inline 资源类型.</li>
</ul>
</li>
</ul>
</li>
<li><p>parser</p>
<ul>
<li><p>dataUrlCondition.maxSize:</p>
<ul>
<li>当 type 为 asset 时,如果资源大小小于 8kb,按照 asset/inline 的规则处理资源,否则按照 asset/resource 的规则处理资源;</li>
<li>可通过指定该属性来改变其界限值(单位为 byte);</li>
<li>该属性仅适用于 asset 资源类型.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h4><blockquote>
<p>contentBase</p>
</blockquote>
<p>  为何在 devServer 设置 contentBase 失效?</p>
<p>  解: contentBase 指的是 devServer 本地代理服务的作用目录,一般设置为绝对路径,在 webpack 5.x 中改为 static,webpack 4.x 及其之前版本依然生效.</p>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
</search>

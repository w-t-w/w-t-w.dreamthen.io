<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>daily problems</title>
    <url>/2022/08/30/daily-problems/</url>
    <content><![CDATA[<h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><blockquote>
<p>npm run scripts</p>
</blockquote>
<p>  为何 npm 执行 package.json 中的 scripts 命令时,即使全局环境变量下不存在的脚本命令也能执行?</p>
<p>  解: 首先 npm run package.json 中的 scripts 脚本命令时,会新建一个 shell 脚本,并将 scripts 中的脚本命令放入其中执行,因此 shell 命令(一般是 bash)完全可以执行;其次,shell 命令执行时,node_modules/.bin 子目录下的所有可执行脚本命令会放入至 $PATH 全局环境变量中,等到 shell 命令执行完毕,$PATH 才会恢复原样.最后 node_modules/.bin 子目录下的所有可执行脚本命令实际上是与 node_modules 下可执行模块建立了软链接的,因此在 node 此类项目下,即使全局环境变量下不存在的脚本命令,依然可以通过 node_modules 中的可执行模块在当前项目下转化执行.</p>
<p>  线性图: node_modules/(可执行模块) -&gt; 通过软链接 =&gt; node_modules/.bin/(可执行脚本命令) -&gt; 通过 shell 脚本命令执行(添加至 $PATH 全局环境变量) =&gt; 即使全局环境变量下不存在的脚本命令也能执行.</p>
<h1 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h1><blockquote>
<p>闭包</p>
</blockquote>
<p>  什么是闭包?</p>
<p>  解: A 函数内包裹 B 函数,B 函数在非 A 函数作用域内实行调用,依然能够使用或者调用 A 函数内的变量或者函数,这就是闭包.</p>
<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><blockquote>
<p>terser-webpack-plugin</p>
</blockquote>
<p>  众所周知,在 webpack 4.x以及之后的版本,开启 mode: ‘production’,相当于默认添加了 terser-webpack-plugin,会自动为构建打包文件压缩混淆.那么有时会发现开启了 mode: ‘production’,却不能实现压缩混淆,这是为什么呢?</p>
<p>  解: 原因很有可能在 optimization.minimizer 里,有时会在里面配置一些对其他资源模块的压缩等功能的插件,而忘记 minimizer 属性值本身会对默认值进行覆盖,导致默认开启的 terser-webpack-plugin 不生效,那么在这时候需要对默认值进行合并,在 minimizer 的最后添加 ‘…’ 元素就可生效.</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">      <span class="attr">minimizer</span>: [</span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line">          <span class="string">&#x27;...&#x27;</span></span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="ssr"><a href="#ssr" class="headerlink" title="ssr"></a>ssr</h1><blockquote>
<p>作用</p>
</blockquote>
<p>  ssr 服务端渲染相对于浏览器客户端渲染,其作用是什么?又有什么优势?</p>
<ul>
<li>HTML 模板以及数据等资源都存放于服务端,内网拉取资源速度更快.</li>
<li>相比于浏览器加载 HTML 以及接口数据等多个资源请求,ssr 服务端渲染只需要加载拼装好数据的一个 HTML 模板即可,大大减少了资源请求次数.</li>
<li>对于用户来说,最直观的就是,大大减少了页面白屏的时间;而对于开发一方来讲,SEO 爬虫页面解析更友好.</li>
</ul>
<h1 id="node"><a href="#node" class="headerlink" title="node"></a>node</h1><blockquote>
<p>__dirname</p>
</blockquote>
<p>  __dirname 与 process.cwd() 的区别是什么?</p>
<p>  解: __dirname 指的是当前文件所在的位置目录. process.cwd() 指的是 node 所作用的位置目录.默认值为当前项目的根目录,可以实行修改: process.chdir(//…),修改后 process.cwd() 就会发生改变.</p>
]]></content>
      <categories>
        <category>problems</category>
      </categories>
      <tags>
        <tag>problems</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo next</title>
    <url>/2022/08/30/hexo-next/</url>
    <content><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p><b>此博客用于搭建 hexo next 主题的字典工具类博客.基本不会探索深究配置的原因,敬请知悉~</b></p>
<h1 id="hexo-安装"><a href="#hexo-安装" class="headerlink" title="hexo 安装"></a>hexo 安装</h1><blockquote>
<p>步骤</p>
</blockquote>
<p>首先要用 npm 资源依赖管理工具安装全局命令 hexo-cli.</p>
<pre><code>npm install hexo-cli -g
</code></pre>
<p>然后使用 hexo 初始化博客目录,比如 blog 目录,目录名要与后续个人建立的 github 上 hexo 托管代码的 repository 库同名.</p>
<pre><code>hexo init blog
</code></pre>
<p>接着 github 建库: 建立一个以 w-t-w(我的账号).github.io 结尾的 repository 库,作为 hexo 托管代码的库, github 默认<br>.github.io 结尾作为用户的网站二级域名,建立一个新的分支作为创作分支(因为主分支是用来发布呈现网站的); 之后,进入生成的 blog<br>文件夹,在本地添加与远程 repository 库链接关联的句柄简称,并设置本地句柄简称推送/同步远程库上游的分支,与远程库建立安全关联,最后同步远程最新资源.</p>
<pre><code>git remote add origin git@github.com:w-t-w/w-t-w.github.io.git
git pull --set-upstream origin master
</code></pre>
<p>再 npm 下载外部资源依赖包.</p>
<pre><code>npm i/npm install
</code></pre>
<p>或者使用 yarn 下载外部资源依赖包.</p>
<pre><code>yarn
</code></pre>
<p>最后启动 hexo 自身搭建的服务,生成本地的博客网站服务,默认端口在本地 ip 地址下的 4000 端口,假如你不想启动在 4000 端口,也可使用-p<br>其他端口号进行配置,比如-p 9777.</p>
<pre><code>hexo server
hexo server -p 9777
</code></pre>
<p>PS: 最好先将本地代码上传至远程之后,再执行 hexo 配置.</p>
<pre><code>git add .
git commit &#39;build:hexo next&#39;
git push
</code></pre>
<p>默认的主题风格 theme 是 landscape<br>,假如你想更换,可以通过<a href='https://hexo.io/themes/'>https://hexo.io/themes</a>进行筛选,筛选之后进行配置,主题配置见下文<br>.</p>
<h1 id="hexo-配置"><a href="#hexo-配置" class="headerlink" title="hexo 配置"></a>hexo 配置</h1><p>PS: 以下所说的”根目录”指的就是当前创作的 repository 目录,”主题目录”就是根目录下/themes目录下的主题环境.</p>
<h4 id="hexo-deploy-发布配置"><a href="#hexo-deploy-发布配置" class="headerlink" title="hexo deploy 发布配置"></a>hexo deploy 发布配置</h4><p>发布部署可以部署至 Github Page 个人网站,也可以部署至个人申请购买的云服务器中.</p>
<p>一. 部署至 Github Page 个人网站.</p>
<blockquote>
<p>步骤</p>
</blockquote>
<p>要想部署到 Github Page 个人网站,首先要下载 hexo-deployer-git 插件.</p>
<pre><code>npm install hexo-deployer-git --save
</code></pre>
<p>然后在根目录底下的 _config.yml 文件中更改 deploy 发布配置,将 source 目录下面的内容进行构建发布到 repository github<br>地址的主分支上.</p>
<pre><code>deploy:
    type: git
    #你的个人网站 github 库的链接地址,最好使用 git@ 开头的, https@ 开头的会报错
    repo: git@github.com:w-t-w/w-t-w.github.io.git
    #分支名
    branch: master
</code></pre>
<p>二. 部署至个人申请购买的云服务器.</p>
<blockquote>
<p>步骤</p>
</blockquote>
<p>将生成的网站博客项目直接通过 <a href='https://filezilla-project.org' />Filezilla</a> 远程服务文件传输工具放入云服务器中;接着通过 <a href='https://macwk.com/soft/royal-tsx'>Royal TSX(破解版😜)</a> 远程服务管理工具对服务器进行深度管理,链接成功后,下载 nginx 代理.</p>
<pre><code># 这里直接使用阿里云CentOS服务器中默认的基于RPM的软件包管理器yum来下载nginx
yum install nginx
</code></pre>
<p>下载之后查看全局命令 nginx 是否存在,查看 nginx 的版本.</p>
<pre><code>nginx -v
</code></pre>
<p>如果全局命令不存在 nginx,则运行 source ~/.bash_profile,使得配置在修改了环境变量的情况下进行重置.</p>
<pre><code>source ~/.bash_profile
</code></pre>
<p>启动 nginx.</p>
<pre><code>nginx
</code></pre>
<ul>
<li><p>顺便提一下 nginx 的其他命令.重启 nginx.</p>
<pre><code>nginx -s reload
</code></pre>
</li>
<li><p>停止 nginx.</p>
<pre><code>nginx -s stop
</code></pre>
</li>
<li><p>通过流(pipe)查询全部用户组 nginx 完整的进程状态.</p>
<pre><code>ps -ef | grep nginx
</code></pre>
</li>
<li><p>强制杀掉 nginx 进程.</p>
<pre><code>#28009是 nginx 进程号,通过 ps -ef | grep nginx 可以查询到
kill -9 28009
</code></pre>
</li>
</ul>
<p>配置 nginx,将服务器代理 root 页面指向博客网站.</p>
<pre><code>#通过测试 nginx,查询 nginx 配置文件所在目录
nginx -t
vim /etc/nginx/nginx.conf
</code></pre>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">...</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    #域名配置,需要申请购买备案(国内域名需要备案,国外域名则不需要)</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    #修改root页面指向网站博客项目</span><br><span class="line">    root         /root/w-t-w;</span><br><span class="line"></span><br><span class="line">    # Load configuration files for the default server block.</span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        # 将 router 路由中不存在的页面重定向至 index.html.</span><br><span class="line">        try_files $uri $uri/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">...</span></span><br></pre></td></tr></table></figure>

<p>通过阿里云平台向云服务器添加安全组,开放 80(HTTP) 端口和 443(HTTPS) 端口.</p>
<p><img src="https://image.white-than-wood.zone/hexo/security_group.png"></p>
<p>配置完之后,基本可以通过 ip 来进行访问博客网站.但要想实现通过域名来访问还需要实行域名解析,通过 A记录 将域名指向一个 IPV4 地址,也就是购买的阿里云服务器 ECS ip.</p>
<p><img src="https://image.white-than-wood.zone/hexo/hexo_dns.png"></p>
<pre><code>&#39;@&#39; 是源域名(主域名 white-than-wood.zone).
&#39;www&#39; 则是 www.white-than-wood.zone.
</code></pre>
<p>这样就可以实现通过域名来访问博客网站,但并没有开启 SSL 证书,也就是并没有启动 https,要想完整实现开启 SSL 证书的域名还需要申请 SSL 证书以及再次配置 nginx.</p>
<p>一. SSL 证书</p>
<p>通过阿里云平台购买或者免费申请,可以获得 SSL 证书,这里申请的是一年期限的普通版 DV SSL 证书.</p>
<p><img src="https://image.white-than-wood.zone/hexo/hexo_ssl.png"></p>
<p>将申请好的 SSL 证书下载并通过 Filezilla 传输至远程服务器中,接着配置 nginx.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">For more information on configuration, see:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  * Official English Documentation: http://nginx.org/en/docs/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  * Official Russian Documentation: http://nginx.org/ru/docs/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里比较简单粗暴的将用户组置为 root root,使得 nginx 可以访问带有 root 权限的文件以及文件夹.</span></span><br><span class="line">user root;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span></span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile             on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    # Load modular configuration files from the /etc/nginx/conf.d directory.</span><br><span class="line">    # See http://nginx.org/en/docs/ngx_core_module.html#include</span><br><span class="line">    # for more information.</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    </span><br><span class="line">    # http 配置</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        root         /root/w-t-w;</span><br><span class="line"></span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">	        index index.html;</span><br><span class="line">	        # 将 router 路由中不存在的页面重定向至 index.html.</span><br><span class="line">	        try_files $uri /$uri /index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # Settings for a TLS enabled server.</span><br><span class="line">    # https 配置,添加 SSL 证书.</span><br><span class="line">    server &#123;</span><br><span class="line">        # https 访问端口一般为 443 端口</span><br><span class="line">        listen       443 ssl http2 default_server;</span><br><span class="line">        listen       [::]:443 ssl http2 default_server;</span><br><span class="line">        # 开启 SSL 证书</span><br><span class="line">        ssl          on;</span><br><span class="line">        # SSL 证书绑定的域名</span><br><span class="line">        server_name  white-than-wood.zone www.white-than-wood.zone;</span><br><span class="line">        root         /root/w-t-w;</span><br><span class="line">        </span><br><span class="line">        # SSL 证书具体配置</span><br><span class="line">        # 证书文件配置,证书文件位置目录必须为绝对路径</span><br><span class="line">        ssl_certificate           &quot;/etc/nginx/cert/xxxx_white-than-wood.zone.pem&quot;;</span><br><span class="line">        ssl_certificate_key       &quot;/etc/nginx/cert/xxxx_white-than-wood.zone.key&quot;;</span><br><span class="line">        # SSL 证书缓存有效期</span><br><span class="line">        ssl_session_timeout       5m;</span><br><span class="line">        # 安全链接可选的加密协议</span><br><span class="line">        ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        # 安全链接加密算法</span><br><span class="line">        ssl_ciphers               ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        # 使用服务器端的首选算法</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">	        index index.html;</span><br><span class="line">	        # 将 router 路由中不存在的页面重定向至 index.html.</span><br><span class="line">	        try_files $uri $uri/ /index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">	    location = /login/oauth/access_token &#123;</span><br><span class="line">            add_header Access-Control-Allow-Origin &#x27;https://white-than-wood.zone/&#x27;;</span><br><span class="line">            add_header Access-Control-Allow-Methods &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line">            add_header Access-Control-Allow-Headers &#x27;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#x27;;</span><br><span class="line">            if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line">                return 204;</span><br><span class="line">            &#125;</span><br><span class="line">            proxy_pass https://github.com/;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启一下 nginx,最后直接访问 <a href="https://white-than-wood.zone/">https://white-than-wood.zone</a> ~ Bingo!!</p>
<p><img src="https://image.white-than-wood.zone/hexo/hexo_https_bingo.png"></p>
<h4 id="hexo-theme-主题配置"><a href="#hexo-theme-主题配置" class="headerlink" title="hexo theme 主题配置"></a>hexo theme 主题配置</h4><blockquote>
<p>示例</p>
</blockquote>
<p>筛选好个人选中的主题之后,就需要在项目里面进行配置更换。首先需要下载远程 github 库里面的主题项目到项目根目录里面的 themes<br>文件夹底下,比如本人用的是 next 主题的 hexo.</p>
<pre><code># 注意 hexo 6.x 之前下载 next 主题远程 github 链接与 hexo 6.x 之后不同!
# hexo 6.x 之前
git clone https://github.com/iissnan/hexo-theme-next.git themes/next
# hexo 6.x 之后
git clone https://github.com/theme-next/hexo-theme-next themes/next
</code></pre>
<img src='https://image.white-than-wood.zone/hexo/next_theme.png' style='width: 100%; height: auto;'/>

<p>随后在根目录里面的 _config.yml 文件中更改 theme 配置.</p>
<pre><code>theme: next
</code></pre>
<p>接着选择主题展示的方式,需要在主题目录下,在 _config.yml 文件中更改 Scheme 配置,比如 next 主题底下的 Scheme 配置.</p>
<pre><code>scheme:
    #scheme: Muse
    #scheme: Mist
    scheme: Pisces
    #scheme: Gemini
</code></pre>
<h4 id="hexo-language-语言配置"><a href="#hexo-language-语言配置" class="headerlink" title="hexo language 语言配置"></a>hexo language 语言配置</h4><blockquote>
<p>步骤</p>
</blockquote>
<p>每个主题的语言都是根据博客作者的母语来配置的,要想配置开发者个人国家的语言,还是在项目根目录底下的 _config.yml 文件中更改<br>language 配置.</p>
<pre><code>language: zh-CN
</code></pre>
<p>再在主题目录底下的 _config.yml 文件中更改 language 配置.</p>
<pre><code>language: zh-CN
</code></pre>
<h4 id="hexo-page-页面配置"><a href="#hexo-page-页面配置" class="headerlink" title="hexo page 页面配置"></a>hexo page 页面配置</h4><blockquote>
<p>步骤</p>
</blockquote>
<p>hexo 提供了几个可供筛选的页面,常用的有这么几个：home(首页)、tags(标签)、about(关于我)、archives(档案)和categories(分类)<br>,首先要创建页面.</p>
<pre><code>hexo new page tags
hexo new page about
hexo new page archives
hexo new page categories
</code></pre>
<p>接着在主题目录下,在 _config.yml 文件中更改 menu 配置,当然每个主题的配置不尽相同.</p>
<pre><code>menu:
    home: / || fa fa-home
    about: /about/ || fa fa-user
    tags: /tags/ || fa fa-tags
    categories: /categories/ || fa fa-th
    archives: /archives/ || fa fa-archive
</code></pre>
<p>随后更改 source 目录底下创建的页面配置,以 tags 为例.</p>
<pre><code>----------------------------
    title: 标签
    date: 2018-04-24 17:57:26
    type: &quot;tags&quot;
    comments: false
----------------------------
</code></pre>
<h4 id="hexo-avatar-头像配置"><a href="#hexo-avatar-头像配置" class="headerlink" title="hexo avatar 头像配置"></a>hexo avatar 头像配置</h4><blockquote>
<p>步骤</p>
</blockquote>
<p>配置个人博客网站的头像,需要更改主题目录底下的 _config.yml 文件,添加 avatar 配置.</p>
<pre><code>#头像url链接
avatar: https://avatars.githubusercontent.com/u/112366447?v=4
</code></pre>
<h4 id="hexo-search-全站搜索配置"><a href="#hexo-search-全站搜索配置" class="headerlink" title="hexo search 全站搜索配置"></a>hexo search 全站搜索配置</h4><blockquote>
<p>步骤</p>
</blockquote>
<p>假如想要配置 hexo 个人博客网站的全站搜索配置,首先要下载 hexo search 外部依赖包.</p>
<pre><code>npm install hexo-generator-search --save
npm install hexo-generator-searchdb --save
</code></pre>
<p>更改根目录底下的 _config.yml 文件,添加 search 配置.</p>
<pre><code>search:
    path: search.xml
    field: post
    format: html
    limit: 10000
</code></pre>
<p>开启主题目录底下的 _config.yml 文件中的 local_search 配置.</p>
<pre><code>local_search:
    enable: true
</code></pre>
<h4 id="hexo-博客文件配置"><a href="#hexo-博客文件配置" class="headerlink" title="hexo 博客文件配置"></a>hexo 博客文件配置</h4><blockquote>
<p>步骤</p>
</blockquote>
<p>假如想要更改每一篇博客的文件名称,不再是默认的:title.md的文件名,需要在根目录底下的 _config.yml 文件中更改 new_post_name<br>配置.</p>
<pre><code>new_post_name: :year-:month-:day-:title.md
</code></pre>
<h4 id="hexo-auto-excerpt-阅读全文配置"><a href="#hexo-auto-excerpt-阅读全文配置" class="headerlink" title="hexo auto_excerpt 阅读全文配置"></a>hexo auto_excerpt 阅读全文配置</h4><blockquote>
<p>步骤</p>
</blockquote>
<p>博客文章一般都会很长的,所以在首页要对博客进行超长省略,要想看所有的内容,点击阅读全文或者文章标题进入全文查看.在<br>hexo-theme-next 主题版本 7.6 之前需要再主题目录底下的 _config.yml 文件中更改 auto_excerpt 配置.</p>
<pre><code>auto_excerpt:
    enable: true
    length: 200
</code></pre>
<p>在 hexo-theme-next 主题版本 7.6 之后,由于 auto_excerpt<br>这种超长省略不应该是主题插件应该做的,作者将此配置移除,并给出新的专门针对此配置的插件 <a href='https://github.com/chekun/hexo-excerpt'><br>hexo-excerpt</a>.</p>
<p><img src="https://image.white-than-wood.zone/hexo/remove_auto_excerpt.png"></p>
<pre><code>excerpt:
    #显示的 markdown 代码块层数
    depth: 5
    excerpt_excludes: []
    more_excludes: []
    #设置为true: 显示超长省略,只展示部分,隐藏全文
    #设置为false: 展示全文
    hideWholePostExcerpts: true
    excerpt_description: true
    #是否显示阅读全文按钮
    read_more_btn: true
</code></pre>
<h4 id="hexo-browsersync-热加载配置"><a href="#hexo-browsersync-热加载配置" class="headerlink" title="hexo browsersync 热加载配置"></a>hexo browsersync 热加载配置</h4><blockquote>
<p>步骤</p>
</blockquote>
<p>在创作博客时,需要每次手动刷新页面才能看到修改后的结果,感觉非常没有效率,如果存在类hrm热加载这种插件就太爽了! <a href='https://github.com/hexojs/hexo-browsersync'><br>hexo-browsersync</a> 可以直接解决这个问题.</p>
<pre><code>npm install hexo-browsersync --save
</code></pre>
<p>此插件原理基于 browser-sync ,与 hexo 建立关联,当创作的文件内容发生改变时, browser-sync<br>就会监听到并刷新浏览器整个页面的内容,做到不需手动刷新,大大提高了创作效率.</p>
<pre><code>#更改根目录底下的 _config.yml 文件,添加 browsersync 属性
#设置监听 watch 属性为 true 就可以了!
browsersync:
    watch: true
    logLevel: &quot;warn&quot;
</code></pre>
<h4 id="hexo-busuanzi-count-卜算子统计配置"><a href="#hexo-busuanzi-count-卜算子统计配置" class="headerlink" title="hexo busuanzi_count 卜算子统计配置"></a>hexo busuanzi_count 卜算子统计配置</h4><blockquote>
<p>步骤</p>
</blockquote>
<p>上线之后,需要对个人博客进行管理,阅读人数以及次数对于创作者来说是很重要反馈点.统计配置需要更改主题目录底下的 _config.yml<br>文件,配置 busuanzi_count 卜算子统计.</p>
<pre><code>#可配置查看个人博客的阅读人数、次数以及每篇博客文章的次数
busuanzi_count:
    enable: true
    total_visitors: true
    total_visitors_icon: fa fa-user
    total_views: true
    total_views_icon: fa fa-eye
    post_views: true
    post_views_icon: fa fa-eye
</code></pre>
<h4 id="hexo-baidu-analytics-百度统计配置"><a href="#hexo-baidu-analytics-百度统计配置" class="headerlink" title="hexo baidu_analytics 百度统计配置"></a>hexo baidu_analytics 百度统计配置</h4><blockquote>
<p>步骤</p>
</blockquote>
<p>卜算子统计有时候会出现一些异常,比如pv莫名会加100,uv不再区分单个ip.为了追求更精确、更智能,这里采用百度统计.<br>统计配置需要更改主题目录底下的 _config.yml 文件,配置 baidu_analytics 百度统计.</p>
<p>根据<a href='https://tongji.baidu.com/main/setting/10000339309/home/site/getjs?siteId=18040501'><br>百度统计-使用配置-代码获取</a>,将 hm.js 后方自动生成的 id 配置至 baidu_analytics.</p>
<p><img src="https://image.white-than-wood.zone/hexo/baidu_analytics.png"></p>
<pre><code># Baidu Analytics
# See: https://tongji.baidu.com
baidu_analytics: 31f07c2ec89d10385ec28e8eea5bbc3a
</code></pre>
<h4 id="hexo-Gitalk-留言板配置"><a href="#hexo-Gitalk-留言板配置" class="headerlink" title="hexo Gitalk 留言板配置"></a>hexo Gitalk 留言板配置</h4><blockquote>
<p>步骤</p>
</blockquote>
<p>留言板 comments 是创作者与阅读者进行互动反馈的窗口,可以使阅读者与创作者共同进步.对于 hexo 来说,支持的留言板模式有很多种: ‘disqus | disqusjs | changyan | livere | gitalk | utterances’,比较常见、用户量比较大且与 github 关联性比较强的就是 gitalk 以及 disqus,disqusjs 需要’梯子’🐶才能评论,那么还是选用 gitalk .留言板配置需要更改主题目录下的 _config.yml 文件.</p>
<p>配置comments:</p>
<pre><code># Multiple Comment System Support
comments:
    # Available values: tabs | buttons
    style: tabs
    # Choose a comment system to be displayed by default.
    # Available values: disqus | disqusjs | changyan | livere | gitalk | utterances
    active: gitalk
    # Setting `true` means remembering the comment system selected by the visitor.
    storage: true
    # Lazyload all comment systems.
    lazyload: false
    # Modify texts or order for any naves, here are some examples.
    nav:
        gitalk:
            order: -2
        disqus:
            text: Load Disqus
            order: -1
</code></pre>
<p>配置gitalk:</p>
<pre><code># Gitalk
# For more information: https://gitalk.github.io
gitalk:
    enable: true
    github_id: w-t-w # GitHub repo owner
    repo: w-t-w.github.io # Repository name to store issues
    client_id: 1191ab5290535c1acb09 # GitHub Application Client ID
    client_secret: 8d2cbebac1ae1230f84d1f9f7a36f8008a42c14b # GitHub Application Client Secret
    admin_user: w-t-w # GitHub repo owner and collaborators, only these guys can initialize gitHub issues
    distraction_free_mode: true # Facebook-like distraction free mode
    # When the official proxy is not available, you can change it to your own proxy address
    proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token
    # proxy: login/oauth/access_token # This is official proxy address
    # Gitalk&#39;s display language depends on user&#39;s browser or system environment
    # If you want everyone visiting your site to see a uniform language, you can set a force language value
    # Available values: en | es-ES | fr | ru | zh-CN | zh-TW
    language: zh-CN
</code></pre>
<p>上面的配置项中有几个需要说明的：</p>
<ul>
<li>client_id 与 client_secret 是 Github 的 OAuth 认证(下一个部分会介绍).</li>
<li>github_id 与 admin_user 这里建议填一样,填成个人的 github 账号名(不是邮箱,也不是用户名).</li>
<li>proxy 默认即是上面的地址,它其实会回调到这里 <a href='https://github.com/login/oauth/access_token'>https://github.com/login/oauth/access_token</a>.</li>
<li>无论是部署至 GitHub Page 个人网站,还是部署至个人申请购买的云服务器,上面三点是必须要实行的,proxy 403 问题主要是在部署至个人申请购买的云服务器中时会遇到,而部署至 GitHub Page 个人网站不能进行自定义配置反向代理,所以只能使用 Gitalk 官方搭建的代理.</li>
</ul>
<p>一. Github 的 OAuth 认证.</p>
<p>前提是得有一个 github 账号,才能注册 OAuth application ,这是<a href='https://github.com/settings/applications/new'> OAuth 应用注册地址</a>.</p>
<p><img src="https://image.white-than-wood.zone/hexo/github_auth_registers.png"></p>
<p>PS: 如果有自定义域名(如个人申请的阿里云域名),则在上图中填入自定义域名.</p>
<p>注册之后,点击下图中’Generate a new client secret’按钮,在个人账号下的Settings -&gt; Developer settings -&gt; OAuth Apps下面可以查看 OAuth 认证 client_id 与 client_secret.</p>
<p><img src="https://image.white-than-wood.zone/hexo/developer_setting.png"></p>
<p>二. Gitalk 自动初始化.</p>
<p>原理: 通过 sitemap 中的信息,请求 github 开放 api 达到自动产生 issues 的目的.<br>基本的要求: github API 需要请求 token.</p>
<ul>
<li><p>申请 github Token.</p>
<p>需要使用 Personal access tokens 方式,这种方式限制每小时5000次,结合缓存功能,基本满足需求.<br>从 Github 的 <a href='https://github.com/settings/tokens'>Personal access tokens</a> 页面,点击 <a href='https://github.com/settings/tokens/new'>Generate new token</a>.</p>
</li>
</ul>
<p><img src="https://image.white-than-wood.zone/hexo/access_tokens.png"></p>
<ul>
<li><p>安装 npm 依赖项.</p>
<pre><code>npm i -D md5 moment request xml-parser
npm i -S hexo-generator-sitemap
</code></pre>
</li>
<li><p>配置 sitemap.</p>
<p>在根目录中创建 sitemap_template.xml.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">urlset</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;</span>&gt;</span></span><br><span class="line">  &#123;% for post in posts %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loc</span>&gt;</span>&#123;&#123; post.permalink | uriencode &#125;&#125;<span class="tag">&lt;/<span class="name">loc</span>&gt;</span></span><br><span class="line">    &#123;% if post.updated %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">lastmod</span>&gt;</span>&#123;&#123; post.updated.toISOString() &#125;&#125;<span class="tag">&lt;/<span class="name">lastmod</span>&gt;</span></span><br><span class="line">    &#123;% elif post.date %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">lastmod</span>&gt;</span>&#123;&#123; post.date.toISOString() &#125;&#125;<span class="tag">&lt;/<span class="name">lastmod</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">date</span>&gt;</span>&#123;&#123; post.date &#125;&#125;<span class="tag">&lt;/<span class="name">date</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123; post.title + &#x27; | &#x27; + config.title &#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;# nunjucks 模版语法 https://github.com/mozilla/nunjucks #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">desc</span>&gt;</span>&#123;&#123; post.description | default(post.excerpt) | default(post.content) | default(config.description) | striptags | truncate(200, true, &#x27;&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">desc</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">urlset</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改根目录下的 _config.yml.</p>
<pre><code>#Sitemap
sitemap:
  path: sitemap.xml
  template: ./sitemap_template.xml
  rel: false
  tag: true
  category: false
</code></pre>
</li>
<li><p>生成 sitemap.xml 生产环境文件.</p>
<pre><code>hexo clean &amp;&amp; hexo generate
</code></pre>
</li>
<li><p>根目录添加 talk-auto-init.js (注意还是不要将此文件置于github中,建议ignore).</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> xmlParser = <span class="built_in">require</span>(<span class="string">&#x27;xml-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> md5 = <span class="built_in">require</span>(<span class="string">&#x27;md5&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置信息</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;w-t-w&#x27;</span>, <span class="comment">// GitHub repository 所有者，可以是个人或者组织。对应 Gitalk 配置中的 owner</span></span><br><span class="line">  <span class="attr">repo</span>: <span class="string">&quot;w-t-w.github.io&quot;</span>, <span class="comment">// 储存评论 issue 的 github 仓库名，仅需要仓库名字即可。对应 Gitalk 配置中的 repo</span></span><br><span class="line">  <span class="attr">token</span>: <span class="string">&#x27;ghp_EuXHDkOxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#x27;</span>, <span class="comment">// 前面申请的 personal access token</span></span><br><span class="line">  <span class="attr">sitemap</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./public/sitemap.xml&#x27;</span>), <span class="comment">// 个人站点的 sitemap 文件地址</span></span><br><span class="line">  <span class="attr">cache</span>: <span class="literal">true</span>, <span class="comment">// 是否启用缓存，启用缓存会将已经初始化的数据写入配置的 gitalkCacheFile 文件，下一次直接通过缓存文件判断</span></span><br><span class="line">  <span class="attr">gitalkCacheFile</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./gitalk-init-cache.json&#x27;</span>), <span class="comment">// 用于保存 gitalk 已经初始化的 id 列表</span></span><br><span class="line">  <span class="attr">gitalkErrorFile</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./gitalk-init-error.json&#x27;</span>), <span class="comment">// 用于保存 gitalk 初始化报错的数据</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api = <span class="string">&#x27;https://api.github.com/repos/&#x27;</span> + config.<span class="property">username</span> + <span class="string">&#x27;/&#x27;</span> + config.<span class="property">repo</span> + <span class="string">&#x27;/issues&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取 sitemap 文件</span></span><br><span class="line"><span class="comment">   * 远程 sitemap 文件获取可参考 https://www.npmjs.com/package/sitemapper</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sitemapXmlReader</span> = (<span class="params">file</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> data = fs.<span class="title function_">readFileSync</span>(file, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> sitemap = <span class="title function_">xmlParser</span>(data);</span><br><span class="line">      <span class="keyword">let</span> ret = [];</span><br><span class="line">      sitemap.<span class="property">root</span>.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">url</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> loc = url.<span class="property">children</span>.<span class="title function_">find</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> item.<span class="property">name</span> === <span class="string">&#x27;loc&#x27;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (!loc) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> title = url.<span class="property">children</span>.<span class="title function_">find</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> item.<span class="property">name</span> === <span class="string">&#x27;title&#x27;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">const</span> desc = url.<span class="property">children</span>.<span class="title function_">find</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> item.<span class="property">name</span> === <span class="string">&#x27;desc&#x27;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">const</span> date = url.<span class="property">children</span>.<span class="title function_">find</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> item.<span class="property">name</span> === <span class="string">&#x27;date&#x27;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        ret.<span class="title function_">push</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>: loc.<span class="property">content</span>,</span><br><span class="line">          <span class="attr">title</span>: title.<span class="property">content</span>,</span><br><span class="line">          <span class="attr">desc</span>: desc.<span class="property">content</span>,</span><br><span class="line">          <span class="attr">date</span>: date.<span class="property">content</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> ret;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 gitalk 使用的 id</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getGitalkId</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">                       url: u,</span></span><br><span class="line"><span class="params">                       date</span></span><br><span class="line"><span class="params">                     &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> link = url.<span class="title function_">parse</span>(u);</span><br><span class="line">  <span class="comment">// 链接不存在，不需要初始化</span></span><br><span class="line">  <span class="keyword">if</span> (!link || !link.<span class="property">pathname</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!date) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">md5</span>(link.<span class="property">pathname</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过以请求判断是否已经初始化</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; gitalk 初始化的id</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">[boolean, boolean]</span>&#125; 第一个值表示是否出错，第二个值 false 表示没初始化， true 表示已经初始化</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getIsInitByRequest</span> = (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> options = &#123;</span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;token &#x27;</span> + config.<span class="property">token</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">url</span>: api + <span class="string">&#x27;?labels=&#x27;</span> + id + <span class="string">&#x27;,Gitalk&#x27;</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">request</span>(options, <span class="keyword">function</span> (<span class="params">err, response, body</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">resolve</span>([err, <span class="literal">false</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">statusCode</span> != <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">resolve</span>([response, <span class="literal">false</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(body);</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">resolve</span>([<span class="literal">false</span>, <span class="literal">true</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">resolve</span>([<span class="literal">false</span>, <span class="literal">false</span>]);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过缓存判断是否已经初始化</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; gitalk 初始化的id</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125; false 表示没初始化， true 表示已经初始化</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">const</span> getIsInitByCache = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 判断缓存文件是否存在</span></span><br><span class="line">    <span class="keyword">let</span> gitalkCache = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      gitalkCache = <span class="built_in">require</span>(config.<span class="property">gitalkCacheFile</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">id</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!gitalkCache) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (gitalkCache.<span class="title function_">find</span>(<span class="function">(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">                              id: itemId</span></span></span><br><span class="line"><span class="params"><span class="function">                            &#125;</span>) =&gt;</span> (itemId === id))) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据缓存，判断链接是否已经初始化</span></span><br><span class="line"><span class="comment">// 第一个值表示是否出错，第二个值 false 表示没初始化， true 表示已经初始化</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">idIsInit</span> = <span class="keyword">async</span> (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!config.<span class="property">cache</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">getIsInitByRequest</span>(id);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果通过缓存查询到的数据是未初始化，则再通过请求判断是否已经初始化，防止多次初始化</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">getIsInitByCache</span>(id) === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">getIsInitByRequest</span>(id);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [<span class="literal">false</span>, <span class="literal">true</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">gitalkInit</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">                      url,</span></span><br><span class="line"><span class="params">                      id,</span></span><br><span class="line"><span class="params">                      title,</span></span><br><span class="line"><span class="params">                      desc</span></span><br><span class="line"><span class="params">                    &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">//创建issue</span></span><br><span class="line">  <span class="keyword">const</span> reqBody = &#123;</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span>: title,</span><br><span class="line">    <span class="string">&#x27;labels&#x27;</span>: [id, <span class="string">&#x27;Gitalk&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;body&#x27;</span>: url + <span class="string">&#x27;\r\n\r\n&#x27;</span> + desc</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;token &#x27;</span> + config.<span class="property">token</span>,</span><br><span class="line">      <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=UTF-8&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">url</span>: api,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(reqBody),</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">request</span>(options, <span class="keyword">function</span> (<span class="params">err, response, body</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">resolve</span>([err, <span class="literal">false</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (response.<span class="property">statusCode</span> != <span class="number">201</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">resolve</span>([response, <span class="literal">false</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">resolve</span>([<span class="literal">false</span>, <span class="literal">true</span>]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 写入内容</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; fileName 文件名</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; content 内容</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">write</span> = <span class="keyword">async</span> (<span class="params">fileName, content, flag = <span class="string">&#x27;w+&#x27;</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      fs.<span class="title function_">open</span>(fileName, flag, <span class="keyword">function</span> (<span class="params">err, fd</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>([err, <span class="literal">false</span>]);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fs.<span class="title function_">writeFile</span>(fd, content, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>([err, <span class="literal">false</span>]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          fs.<span class="title function_">close</span>(fd, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">              <span class="title function_">resolve</span>([err, <span class="literal">false</span>]);</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="title function_">resolve</span>([<span class="literal">false</span>, <span class="literal">true</span>]);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">init</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> urls = <span class="title function_">sitemapXmlReader</span>(config.<span class="property">sitemap</span>);</span><br><span class="line">  <span class="comment">// 报错的数据</span></span><br><span class="line">  <span class="keyword">const</span> errorData = [];</span><br><span class="line">  <span class="comment">// 已经初始化的数据</span></span><br><span class="line">  <span class="keyword">const</span> initializedData = [];</span><br><span class="line">  <span class="comment">// 成功初始化数据</span></span><br><span class="line">  <span class="keyword">const</span> successData = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> urls) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      url,</span><br><span class="line">      date,</span><br><span class="line">      title,</span><br><span class="line">      desc</span><br><span class="line">    &#125; = item;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="title function_">getGitalkId</span>(&#123;</span><br><span class="line">      url,</span><br><span class="line">      date</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (!id) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`id: 生成失败 [ <span class="subst">$&#123;id&#125;</span> ] `</span>);</span><br><span class="line">      errorData.<span class="title function_">push</span>(&#123;</span><br><span class="line">        ...item,</span><br><span class="line">        <span class="attr">info</span>: <span class="string">&#x27;id 生成失败&#x27;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> [err, res] = <span class="keyword">await</span> <span class="title function_">idIsInit</span>(id);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Error: 查询评论异常 [ <span class="subst">$&#123;title&#125;</span> ] , 信息：`</span>, err || <span class="string">&#x27;无&#x27;</span>);</span><br><span class="line">      errorData.<span class="title function_">push</span>(&#123;</span><br><span class="line">        ...item,</span><br><span class="line">        <span class="attr">info</span>: <span class="string">&#x27;查询评论异常&#x27;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (res === <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="comment">// console.log(`--- Gitalk 已经初始化 --- [ $&#123;title&#125; ] `);</span></span><br><span class="line">      initializedData.<span class="title function_">push</span>(&#123;</span><br><span class="line">        id,</span><br><span class="line">        url,</span><br><span class="line">        title,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Gitalk 初始化开始... [ <span class="subst">$&#123;title&#125;</span> ] `</span>);</span><br><span class="line">    <span class="keyword">const</span> [e, r] = <span class="keyword">await</span> <span class="title function_">gitalkInit</span>(&#123;</span><br><span class="line">      id,</span><br><span class="line">      url,</span><br><span class="line">      title,</span><br><span class="line">      desc</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (e || !r) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Error: Gitalk 初始化异常 [ <span class="subst">$&#123;title&#125;</span> ] , 信息：`</span>, e || <span class="string">&#x27;无&#x27;</span>);</span><br><span class="line">      errorData.<span class="title function_">push</span>(&#123;</span><br><span class="line">        ...item,</span><br><span class="line">        <span class="attr">info</span>: <span class="string">&#x27;初始化异常&#x27;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    successData.<span class="title function_">push</span>(&#123;</span><br><span class="line">      id,</span><br><span class="line">      url,</span><br><span class="line">      title,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Gitalk 初始化成功! [ <span class="subst">$&#123;title&#125;</span> ] - <span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">// 空输出，用于换行</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--------- 运行结果 ---------&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">// 空输出，用于换行</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (errorData.<span class="property">length</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`报错数据： <span class="subst">$&#123;errorData.length&#125;</span> 条。参考文件 <span class="subst">$&#123;config.gitalkErrorFile&#125;</span>。`</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">write</span>(config.<span class="property">gitalkErrorFile</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(errorData, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`本次成功： <span class="subst">$&#123;successData.length&#125;</span> 条。`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 写入缓存</span></span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">cache</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`写入缓存： <span class="subst">$&#123;(initializedData.length + successData.length)&#125;</span> 条，已初始化 <span class="subst">$&#123;initializedData.length&#125;</span> 条，本次成功： <span class="subst">$&#123;successData.length&#125;</span> 条。参考文件 <span class="subst">$&#123;config.gitalkCacheFile&#125;</span>。`</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">write</span>(config.<span class="property">gitalkCacheFile</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(initializedData.<span class="title function_">concat</span>(successData), <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`已初始化： <span class="subst">$&#123;initializedData.length&#125;</span> 条。`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>修改 package.json 中 scripts 中的脚本,添加 “gitalk”:”node talk-auto-init.js”.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;clean&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;publish&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git push &amp;&amp; yarn run clean &amp;&amp; hexo generate -d&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo server&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yarn run clean &amp;&amp; yarn run server -p 9777&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;gitalk&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node talk-auto-init.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试 gitalk.</p>
<pre><code>yarn run gitalk
</code></pre>
</li>
<li><p>已经缓存过后的结果:</p>
<pre><code>hexo-site@0.0.0 gitalk
node talk-auto-init.js
--------- 运行结果 ---------
本次成功： 0 条。
写入缓存： 7 条，已初始化 7 条，本次成功： 0 条。参考文件 /Users/wtw/frontEnd/w-t-w.github.io/gitalk-init-cache.json.
</code></pre>
</li>
</ul>
<blockquote>
<p>proxy 403错误</p>
</blockquote>
<p>部署至个人申请购买的云服务器时,由于跨域问题,会出现 proxy 403 forbidden.解决它主要有这么几个方案.</p>
<ul>
<li><p>nginx 反向代理解决方案(推荐).</p>
<p>在云服务器 nginx 的博客配置中加入如下内容(注意个人博客的域名必须经过 https ssl 安全证书备案).</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2 default_server;</span><br><span class="line">    #...</span><br><span class="line">    #这里省略的部分都是对于 ssl http2 证书的配置</span><br><span class="line">    location = /login/oauth/access_token &#123;</span><br><span class="line">        add_header Access-Control-Allow-Origin &#x27;https://white-than-wood.zone/&#x27;;  //这里改成个人的域名,并删除注释</span><br><span class="line">        add_header Access-Control-Allow-Methods &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line">        add_header Access-Control-Allow-Headers &#x27;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#x27;;</span><br><span class="line">        if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line">              return 204;</span><br><span class="line">        &#125;</span><br><span class="line">        proxy_pass https://github.com/;</span><br><span class="line">    &#125;</span><br><span class="line">    #...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PS: nginx 反向代理之后,要将 proxy 指向代理域名下的链接回调进行修改.</p>
<pre><code>proxy: https://white-than-wood.zone/https://github.com/login/oauth/access_token
</code></pre>
</li>
<li><p>自建一个 workers.</p>
<p>地址: <a href='https://workers.cloudflare.com/'>CloudFlare Workers</a>.<br>参考文章: <a href='https://blog.dsrkafuu.net/post/2020/cloudflare-worker-cors-anywhere/'>使用 CloudFlare Workers 实现 CORS Anywhere</a>.</p>
</li>
<li><p>使用其他人搭建的代理.</p>
<p>比如这个 <a href='https://github.com/gitalk/gitalk/issues/429#issuecomment-778291781'>issues</a> 介绍到的:</p>
<pre><code> proxy: https://shielded-brushlands-08810.herokuapp.com/https://github.com/login/oauth/access_token
</code></pre>
</li>
<li><p>使用 Gitalk 官方搭建的代理.</p>
<p>据gitalk issue<a href='https://github.com/gitalk/gitalk/issues/433'> gitalk 授权登录后报错 403</a>,直接将使用 Gitalk 官方搭建的代理就可解决 403 forbidden 的问题,之前 Gitalk 官方搭建的代理由于太多人接入导致被官方限制使用,用户经常发现不能正常使用,现在已经对代理进行优化改进,不会出现限制使用的情况.</p>
<p><img src="https://image.white-than-wood.zone/hexo/gitalk_403.png"></p>
<pre><code> https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token
</code></pre>
</li>
<li><p>更新 gitalk 版本至1.7.2.</p>
<p>据gitalk issue<a href='https://github.com/gitalk/gitalk/issues/433'> gitalk 授权登录后报错 403</a>,直接将 gitalk 版本升级至 1.7.2 就可解决 403 forbidden 的问题.</p>
<p><img src="https://image.white-than-wood.zone/hexo/gitalk_403.png"></p>
</li>
</ul>
<h4 id="hexo-GitHub-Page-个人网站自定义域名"><a href="#hexo-GitHub-Page-个人网站自定义域名" class="headerlink" title="hexo GitHub Page 个人网站自定义域名"></a>hexo GitHub Page 个人网站自定义域名</h4><p>部署至 GitHub Page 个人网站配置自定义域名时,需要将个人申请购买的域名(最好是通过 https ssl 安全证书备案)进行域名解析,GitHub Page 也需要 CNAME 配置.</p>
<p>一. 阿里云域名解析.</p>
<blockquote>
<p>步骤</p>
</blockquote>
<p>域名解析简单来说实际上就是通过配置,将域名解析至某一个 IP 地址或者域名.首先进入阿里云服务管理平台,对已经申请购买的域名进行解析.</p>
<p><img src="https://image.white-than-wood.zone/hexo/website_host_analy.png"></p>
<p>添加记录或者对某一个列表项进行修改.可以使用 A记录 也可以使用 CNAME.</p>
<pre><code>A记录 是将域名指向一个 IPV4 地址.
CNAME 是将域名指向另外一个域名.
</code></pre>
<p><img src="https://image.white-than-wood.zone/hexo/website_host_analy_details.png"></p>
<p>这里使用的是 A记录,将 w-t-w.github.io 的 IP 地址作为记录值.</p>
<pre><code>ping w-t-w.github.io
</code></pre>
<p><img src="https://image.white-than-wood.zone/hexo/website_host_analy_pings.png"></p>
<p>主机记录,解析后的域名基本上就两种,‘@’和’www’.</p>
<pre><code>&#39;@&#39; 是源域名(主域名 white-than-wood.zone).
&#39;www&#39; 则是 www.white-than-wood.zone.
</code></pre>
<p>二. GitHub Page个人网站CNAME配置.</p>
<p>在 source 目录下新建 CNAME 文件(不带任何后缀),在文件内写入你的主域名.</p>
  <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">white-than-wood.zone</span><br></pre></td></tr></table></figure>

<p>或者在 Github Page 个人配置下设置自定义域名,Github 会自动添加 CNAME 文件.</p>
<p><img src="https://image.white-than-wood.zone/hexo/website_host_github_cnames.png"></p>
<p>这两种方式这里是全部使用的.全部搞定之后,就可以通过 white-than-wood.zone 访问 w-t-w.github.io GitHub Page 个人网站.</p>
<blockquote>
<p>延伸</p>
</blockquote>
<p>既然已经通过阿里云服务 A记录 或者 CNAME 解析域名,为什么还需要在 GitHub Page 个人网站上配置 CNAME ?</p>
<p>解: 云服务 A记录 或者 CNAME 域名解析至 GitHub Page,通过 white-than-wood.zone 可以访问 GitHub Page 个人网站,那原来的 w-t-w.github.io 域名怎么办呢? GitHub Page 也通过 CNAME 域名解析至 white-than-wood.zone. 使得 github.io 域名也可以直接访问个人申请购买的域名.</p>
<h4 id="hexo-其他配置"><a href="#hexo-其他配置" class="headerlink" title="hexo 其他配置"></a>hexo 其他配置</h4><blockquote>
<p>示例</p>
</blockquote>
<p>在根目录底下的 _config.yml 文件中更改网站title(标题)、author(作者)、keywords(关键字)、description(描述)配置,比如本人的配置.</p>
<pre><code>title: wtw&#39;s Frontend
author: wtw(比木白)
keywords: hexo,hexo blog,webpack
subtitle: 道阻且长,行则将至
description: 前端领域内所不知道的都探索于此!
</code></pre>
<p>再主题目录底下的 _config.yml 文件重设置个人的github(github托管代码网址)、google(google个人资料网址)、gmail(gmail邮箱网址)<br>、twitter(twitter个人微博网址)等等,比如本人的配置.</p>
<pre><code>social:
  GitHub: https://github.com/w-t-w || fab fa-github
  E-Mail: https://dreamthen.00@gmail.com || fab fa-envelope
  Google: https://plus.google.com/u/0/103833130011211353424 || fab fa-google
</code></pre>
<p>发布到 GitHub Page 上之后,你会发现 README.md 莫名的消失,主要是因为 hexo 构建发布到远程的目录只是 source 目录,所以只要将<br>README.md copy 一份放到 source 目录下,并且配置渲染时需要跳过的文件就可以了.</p>
<pre><code>#hexo 构建渲染时会将 source 目录下 markdown 类型文件转译为 html,不需要将 README.md 转译,所以直接 skip render
#更改根目录底下的 _config.yml 文件,修改 skip_render 属性
skip_render: README.md
</code></pre>
<p>当创作中图片过小,阅读者无法看清的情况下,放大配置就已然成为必要 .fancybox<br>配置可以点击使图片放大,并可同时查看全文的图片.更改主题目录下的 _config.yml 文件 fancybox 属性.</p>
<pre><code># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.
# For more information: https://fancyapps.com/fancybox/
fancybox: true
</code></pre>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>hexo blog</tag>
      </tags>
  </entry>
  <entry>
    <title>think of nodejs</title>
    <url>/2022/08/30/think-of-nodejs/</url>
    <content><![CDATA[<h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><h4 id="browserslist"><a href="#browserslist" class="headerlink" title="browserslist"></a>browserslist</h4><blockquote>
<p>作用</p>
</blockquote>
<p>用于编译转化样式文件以兼容浏览器的对于各类浏览器版本的筛选.</p>
<blockquote>
<p>分类</p>
</blockquote>
<p>[“&gt;0.2%”]: 指的是现阶段的用户比例&gt;0.2%的所有浏览器版本.<br>[“last 2 versions”]: 指的是现阶段所有浏览器最近发布的两个版本.<br>[“not dead”]: 指的是现阶段没有被删除销毁的所有浏览器版本.<br>[“defaults”]: 相当于 “&gt;0.2%”、”last 2 versions”以及”not dead” 浏览器版本的并集.<br>[“&gt;0.2%”,”last 2 versions”,”not dead”]: 相当于 “&gt;0.2%”、”last 2 versions”以及”not dead” 浏览器版本的并集.<br>[“&gt;0.2% and last 2 versions and not dead”]: 相当于 “&gt;0.2%”、”last 2 versions”以及”not dead” 浏览器版本的交集.<br>[“&gt;0.2% or last 2 versions or not dead”]: 相当于 “&gt;0.2%”、”last 2 versions”以及”not dead” 浏览器版本的并集.<br>[“not &gt;0.2%”]: 指的是现阶段的用户比例 &lt;=0.2% 的所有浏览器版本.</p>
<h4 id="version"><a href="#version" class="headerlink" title="version"></a>version</h4><blockquote>
<p>作用</p>
</blockquote>
<p>用于发布构建/依赖/工具时,对于版本号的分类管理.</p>
<blockquote>
<p>分类</p>
</blockquote>
<ul>
<li>patch: 是对此构建/依赖/工具的补丁,常指修复一些Bug、代码样式美化以及变更文档等.</li>
<li>minor: 是对此构建/依赖/工具在当前 API 下新增一个功能.</li>
<li>major: 是对此构建/依赖/工具与当前 API 出现比较大的不兼容,也就是 BREAKING CHANGES 的重构.</li>
</ul>
<h4 id="pre-version"><a href="#pre-version" class="headerlink" title="pre-version"></a>pre-version</h4><blockquote>
<p>作用</p>
</blockquote>
<p>先行版本号是作为构建/依赖/工具稳定版本生命周期的线性图,可确保其上线的质量、安全以及稳定性.</p>
<blockquote>
<p>分类</p>
</blockquote>
<ul>
<li>alpha: 是内测版本,一般会有很多 Bug,内测人员使用.</li>
<li>beta: 测试版本,会开放一部分外部人员测试,这阶段还是会继续开发新功能.</li>
<li>rc: 公测版本,会完全对外开放测试,不再开发添加新功能.</li>
</ul>
<h4 id="npx"><a href="#npx" class="headerlink" title="npx"></a>npx</h4><blockquote>
<p>作用</p>
</blockquote>
<p>是 npm 自带的包执行器.其主要作用就是可随时执行项目内安装的可执行模块,且可在全局环境变量下脚本命令不存在时,自动安装执行.</p>
<blockquote>
<p>原理</p>
</blockquote>
<p>其原理非常简单,就是轮询 node_modules/.bin 子目录以及 $PATH 全局环境变量下是否存在指定的脚本命令,如果存在就执行,本地不存在则自动安装下载执行.</p>
<blockquote>
<p>参数</p>
</blockquote>
<ul>
<li>–no-install: 指的是强制使用本地模块,禁止下载远程模块.</li>
</ul>
<h4 id="inquirer"><a href="#inquirer" class="headerlink" title="inquirer"></a>inquirer</h4><blockquote>
<p>作用</p>
</blockquote>
<p>是用于与用户进行简单互动的依赖,存在输入选择、判断选择、列表选择等互动方式.</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">&#x27;inquirer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> prompt = inquirer.<span class="title function_">createPromptModule</span>();</span><br><span class="line"><span class="keyword">const</span> env = <span class="title function_">prompt</span>([&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;请选择 webpack 构建打包时所属的环境:&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;env&#x27;</span>,</span><br><span class="line">    <span class="attr">choices</span>: [</span><br><span class="line">        <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;production&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="title function_">filter</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value.<span class="title function_">toLowerCase</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;]);</span><br><span class="line"><span class="keyword">const</span> _env = env[<span class="string">&#x27;env&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(_env);</span><br></pre></td></tr></table></figure>

<h4 id="shelljs"><a href="#shelljs" class="headerlink" title="shelljs"></a>shelljs</h4><blockquote>
<p>作用</p>
</blockquote>
<p>是通过 js 新建 shell 脚本执行 shell 命令的依赖,简洁易用.</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> &#123;exec&#125; = <span class="built_in">require</span>(<span class="string">&#x27;shelljs&#x27;</span>);</span><br><span class="line"><span class="title function_">exec</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="yargs"><a href="#yargs" class="headerlink" title="yargs"></a>yargs</h4><blockquote>
<p>作用</p>
</blockquote>
<p>是用于解析命令行的依赖,可对命令行参数逐个解析,功能极其强大.</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> yargs = <span class="built_in">require</span>(<span class="string">&#x27;yargs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> argv = process.<span class="property">argv</span>;</span><br><span class="line"><span class="keyword">const</span> env = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">yargs.<span class="title function_">parse</span>(argv.<span class="title function_">slice</span>(<span class="number">2</span>), <span class="function">(<span class="params">err, argv</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(err);</span><br><span class="line">    &#125;</span><br><span class="line">    env = argv[<span class="string">&#x27;env&#x27;</span>];</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(env);</span><br></pre></td></tr></table></figure>

<h4 id="rimraf"><a href="#rimraf" class="headerlink" title="rimraf"></a>rimraf</h4><blockquote>
<p>作用</p>
</blockquote>
<p>是用于递归剃掉删除项目目录的依赖,其绝对根目录是 node 所作用的位置目录,也就是 process.cwd().</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> rimraf = <span class="built_in">require</span>(<span class="string">&#x27;rimraf&#x27;</span>);</span><br><span class="line"><span class="comment">// 首参数: 相对于 node 所作用的位置目录.</span></span><br><span class="line"><span class="comment">// 回调函数: 在操作过后执行的步骤.</span></span><br><span class="line"><span class="title function_">rimraf</span>(<span class="string">&#x27;./dist&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="spritesmith"><a href="#spritesmith" class="headerlink" title="spritesmith"></a>spritesmith</h4><blockquote>
<p>作用</p>
</blockquote>
<p>是用于合并多个图片形成雪碧图的依赖.</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> &#123;run&#125; = <span class="built_in">require</span>(<span class="string">&#x27;spritesmith&#x27;</span>);</span><br><span class="line"><span class="comment">// 位置目录必须为绝对路径</span></span><br><span class="line"><span class="title function_">run</span>(&#123;<span class="attr">src</span>: [<span class="string">&#x27;pic1.png&#x27;</span>, <span class="string">&#x27;pic2.png&#x27;</span>]&#125;, <span class="function">(<span class="params">err, image</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 会生成 16进制 Buffer</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(image.<span class="property">image</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="jszip"><a href="#jszip" class="headerlink" title="jszip"></a>jszip</h4><blockquote>
<p>作用</p>
</blockquote>
<p>用于使用 js 实现 zip 压缩打包的依赖.</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> <span class="title class_">JsZip</span> = <span class="built_in">require</span>(<span class="string">&#x27;jszip&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> jszip = <span class="keyword">new</span> <span class="title class_">JsZip</span>();</span><br><span class="line"><span class="comment">// 生成空的压缩打包文件</span></span><br><span class="line">jszip.<span class="title function_">folder</span>(<span class="string">&#x27;offline&#x27;</span>);</span><br><span class="line"><span class="comment">// 生成填入内容的压缩打包文件</span></span><br><span class="line">jszip.<span class="title function_">file</span>(<span class="string">&#x27;index.js&#x27;</span>, <span class="string">&#x27;console.log(&quot;wtw&quot;)&#x27;</span>);</span><br><span class="line"><span class="comment">// 将压缩打包文件实行各种数据类型转换</span></span><br><span class="line">jszip.<span class="title function_">generatorAsync</span>(&#123;<span class="attr">type</span>: <span class="string">&#x27;nodebuffer&#x27;</span>&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">content</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(content);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>自定义 webpack 插件以生成离线压缩包</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义的生成离线压缩包的 webpack 插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">JsZipPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;./lib/jsZipPlugin.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">OUTPUT_DIR</span> = <span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), <span class="string">&#x27;./build&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> webpackConfig = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="variable constant_">OUTPUT_DIR</span>,</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;index.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JsZipPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;offline&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = wbpackConfig;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">JsZip</span> = <span class="built_in">require</span>(<span class="string">&#x27;jszip&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">RawSource</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-sources&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JsZipPlugin</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">options</span> = options;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所有的 webpack 插件都遵循其 tapable 插件体制,类似于 EnventEmitter 那种观察订阅模式</span></span><br><span class="line">    <span class="title function_">apply</span>(<span class="params">compiler</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;name = <span class="string">&#x27;&#x27;</span>&#125; = <span class="variable language_">this</span>.<span class="property">options</span>;</span><br><span class="line">        <span class="keyword">const</span> jszip = <span class="keyword">new</span> <span class="title class_">JsZipPlugin</span>();</span><br><span class="line">        <span class="comment">// 订阅生成文件时的 hooks 事件,emit 是 AsyncSeriesHook(异步串行 hook)</span></span><br><span class="line">        compiler.<span class="property">hooks</span>.<span class="property">emit</span>.<span class="title function_">tapAsync</span>(<span class="string">&#x27;JsZipPlugin&#x27;</span>, <span class="function">(<span class="params">compilation, callback</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 生成空的压缩打包文件</span></span><br><span class="line">            jszip.<span class="title function_">folder</span>(name);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> filename <span class="keyword">in</span> compilation.<span class="property">assets</span>) &#123;</span><br><span class="line">                <span class="comment">// 生成填入 webpack 构建打包源代码的压缩打包文件</span></span><br><span class="line">                jszip.<span class="title function_">file</span>(filename, compilation.<span class="property">assets</span>[filename].<span class="title function_">source</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 实行 nodebuffer 数据类型转换,将源代码转换为 buffer,并放入至 webpack 构建打包生成的资源模块内.</span></span><br><span class="line">            jszip.<span class="title function_">generatorAsync</span>(&#123;<span class="attr">type</span>: <span class="string">&#x27;nodebuffer&#x27;</span>&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">content</span>) =&gt;</span> &#123;</span><br><span class="line">                compilation.<span class="property">assets</span>[name] = <span class="keyword">new</span> <span class="title class_">RawSource</span>(content);</span><br><span class="line">                <span class="title function_">callback</span>();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>think of webpack</title>
    <url>/2022/08/30/think-of-webpack/</url>
    <content><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><h4 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h4><blockquote>
<p>作用</p>
</blockquote>
<p>  作为 webpack 构建打包的入口,搜索全局资源的起点’.</p>
<blockquote>
<p>属性值</p>
</blockquote>
<p>  为何设置 entry 的属性值必须为相对路径,而绝对路径却会报错?</p>
<p>  解: entry 是 webpack 构建打包的入口,是搜索全局资源的起点,它的属性值是设置为相对于整个项目而言的,也就是当前项目根目录,在 webpack context 属性不变的情况下, entry 属性值永远相对于当前项目根目录,当然如若 context 属性值发生改变,entry 是可以设置绝对路径的,因为 webpack 所作用的构建打包项目根目录发生了改变,当然也可以强制设置 entry 属性值为绝对路径,但是其只是相对于当前设备目录而言,是存在很大的配置风险的.</p>
<h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><blockquote>
<p>filename</p>
</blockquote>
<p>  output.filename 的作用是什么?</p>
<p>  解: 作为 webpack 构建打包导出文件的名称.  </p>
<blockquote>
<p>path</p>
</blockquote>
<p>  output.path 的作用是什么?</p>
<p>  解: 作为 webpack 构建打包文件导出的位置目录.</p>
<blockquote>
<p>publicPath</p>
</blockquote>
<p>  output.publicPath 的作用是什么?</p>
<p>  解: 作为 webpack 构建打包文件导出的位置目录前缀.</p>
<blockquote>
<p>chunkFilename</p>
</blockquote>
<p>  output.chunkFilename 的作用是什么?</p>
<p>  解: 作为 webpack 构建打包导出模块的名称.</p>
<blockquote>
<p>crossOriginLoading</p>
</blockquote>
<p>  output.crossOriginLoading 的作用是什么?</p>
<p>  解: 其只在 target: ‘web’ 时生效,利用 JSONP 向文件内联 &lt;script&gt; 标签,实现按需加载模块.</p>
<h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><blockquote>
<p>原理分析</p>
</blockquote>
<p>  webpack –watch 文件监听的原理是什么?</p>
<p>  解: 轮询可监听的编辑文件的最后修改时间是否发生变化,如果发生了变化,则会引起 webpack 重新构建打包.</p>
<blockquote>
<p>参数</p>
</blockquote>
<p>  webpack –watch 文件监听有哪些参数?</p>
<p>  解: webpack –watch 文件监听有一些参数,全都在属性 watchOptions 中,其中包含三个主要参数: ignored、aggregateTimeout和poll.</p>
<p>  webpack –watch 文件监听里主要参数的作用是什么?</p>
<ul>
<li>ignored =&gt; 筛选不实行监听的位置目录.</li>
<li>aggregateTimeout =&gt; 当轮询到可监听的编辑文件的最后修改时间发生了变化,不会立即告知监听者引起 webpack 重新构建打包,而是会加入至缓存中,在 aggregateTimeout 时间段内重复此类操作,等时间段结束之后,将缓存中的文件列表统一实行构建打包.</li>
<li>poll =&gt; 在某一个时间段内,轮询的可监听的编辑文件的最后修改时间是否发生变化的次数.</li>
</ul>
<h4 id="devtool"><a href="#devtool" class="headerlink" title="devtool"></a>devtool</h4><blockquote>
<p>sourceMap</p>
</blockquote>
<p>  sourceMap 的作用是什么?</p>
<p>  解: 用于前端开发者根据 sourceMap 文件精确探寻源代码的一些问题,开发环境一般开启,生产环境则必须关闭.</p>
<blockquote>
<p>参数</p>
</blockquote>
<p>  首先了解几个概念: cheap、eval、inline、module、source-map</p>
<ul>
<li>cheap: 构建打包的 sourceMap 文件只能通过行追踪.</li>
<li>eval: 表达式通过 eval 语法包裹,注释紧跟 eval 语法备注所出于的源代码位置目录.</li>
<li>inline: sourceMap 通过内联 sourceMap dataURI 至构建打包文件,不会单独导出 .map 文件.</li>
<li>module: 会导出未被 loader 处理的源代码.</li>
<li>source-map: 构建打包会额外单独导出 .map 文件.</li>
</ul>
<p>  这几个概念按照逻辑排列组合,自然形成了各种参数.举几个🌰:</p>
<ul>
<li>source-map: 会额外单独导出 .map 文件,可直接精确探寻源代码.</li>
<li>cheap-source-map: 会额外单独导出 .map 文件,可直接精确探寻源代码,但堆栈追踪错误只能通过行,不会显示列.</li>
<li>inline-source-map: 不会额外单独导出 .map 文件,会通过内联 sourceMap dataURI 至构建打包文件(体积会明显增大),可直接精确探寻源代码.</li>
<li>cheap-module-source-map: 会额外单独导出 .map文件,可直接精确探寻未被 loader 处理时的源代码,但堆栈追踪错误只能通过行,不会显示列.</li>
<li>eval: 不会额外单独导出 .map 文件,表达式通过 eval 语法包裹,注释紧跟 eval 语法备注所出于的源代码位置目录,无法直接精确探寻源代码.</li>
</ul>
<h4 id="splitChunks"><a href="#splitChunks" class="headerlink" title="splitChunks"></a>splitChunks</h4><blockquote>
<p>参数</p>
</blockquote>
<ul>
<li>chunks: 有三个枚举选项,”async”、”initial “以及 “all”,默认为 “async”,表示对于异步、非异步以及全部的模块代码分割的选择.</li>
<li>minChunks: 表示模块最少可被导入实现分割的次数,默认为 1.</li>
<li>minSize: 表示模块最少可被分割的体积大小,默认为 30000,也就是 30kb.</li>
<li>maxInitialRequests: 表示入口模块并发请求的最大次数,默认为 3.</li>
<li>maxAsyncRequests: 表示模块按需加载并发请求的最大次数,默认为 5.</li>
<li>name: 模块代码分割后导出模块的名称.</li>
<li>cacheGroups: 缓存组可配置多个组,组中的元素会覆盖或者继承组外的属性值,除了 test、priority 以及 reuseExistingChunk.</li>
<li>cacheGroups.test: 筛选要分割导出的模块.</li>
<li>cacheGroups.priority: 可通过优先级来改变构建打包模块代码分割的顺序,默认值为 -20.</li>
</ul>
<h4 id="TreeShaking"><a href="#TreeShaking" class="headerlink" title="TreeShaking"></a>TreeShaking</h4><blockquote>
<p>作用</p>
</blockquote>
<p>  可用于将永远执行不到的、无用的变量以及执行的代码结果不会被使用的表达式,剔除出构建打包文件.<br>  PS: 只能作用于可静态分析的 ESM 模块, commonjs 或者 commonjs2 模块都不会生效.</p>
<h4 id="Scope-Hoisting"><a href="#Scope-Hoisting" class="headerlink" title="Scope Hoisting"></a>Scope Hoisting</h4><blockquote>
<p>作用</p>
</blockquote>
<p>  对于不开启 Scope Hoisting 的构建打包文件来说,会存在大量的 IIFE 自执行函数表达式闭包,webpack 会对每个导入模块外加一层包裹,且将 import 转化成 <strong>webpack_require</strong>,这样就会导致构建打包文件体积增大,而大量的闭包也会导致设备的内存空间吃紧,而 Scope Hoisting 就是用来解决此类问题的,Webpack 4.x 当中只要将 mode 设置为 “production”,就会开启 Scope Hoisting,而在 Webpack 4.x 之前的版本则需引入 new webpack.optimize.ModuleConcatenationPlugin(),Scope Hoisting 会将导入的模块内联进一个大的函数作用域中,使模块按照引用的顺序进行排列,适当的重命名一些变量以防止变量名冲突,这样就会大大减少文件以及内存空间的体积.</p>
<p>  PS: 只能作用于可静态分析的 ESM 模块, commonjs 或者 commonjs2 模块都不会生效.</p>
<h4 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h4><blockquote>
<p>alias</p>
</blockquote>
<p>  resolve.alias 的作用是什么?</p>
<p>  解: 使用别名替代复杂的模块导入路径.</p>
<blockquote>
<p>mainFields</p>
</blockquote>
<p>  resolve.mainFields 的作用是什么?</p>
<p>  解: 自定义依赖被导入的文件位置.</p>
<blockquote>
<p>extensions</p>
</blockquote>
<p>  resolve.extensions 的作用是什么?</p>
<p>  解: 选择省略导入模块的后缀.</p>
<blockquote>
<p>modules</p>
</blockquote>
<p>  resolve.modules 的作用是什么?</p>
<p>  解: 指定导入依赖的位置目录.</p>
<blockquote>
<p>enforceExtensions</p>
</blockquote>
<p>  resolve.enforceExtensions 的作用是什么?</p>
<p>  解: 强制导入模块必须添加后缀.</p>
<h4 id="module"><a href="#module" class="headerlink" title="module"></a>module</h4><blockquote>
<p>noParse</p>
</blockquote>
<p>  module.noParse 的作用是什么?</p>
<p>  解: 用于 webpack 筛选可忽略的未使用标准模块的依赖,如 jQuery 等,PS: 筛选可忽略的依赖应该不包含 import,define,require 等标准模块语义.</p>
<h4 id="externals"><a href="#externals" class="headerlink" title="externals"></a>externals</h4><blockquote>
<p>作用</p>
</blockquote>
<p>  用于 webpack 筛选不实行构建打包的依赖,比如 jQuery 这种体积非常庞大,构建打包没有任何收益的依赖,最后直接作为全局变量内联入构建打包文件内.</p>
<h4 id="loaders"><a href="#loaders" class="headerlink" title="loaders"></a>loaders</h4><blockquote>
<p>babel-loader</p>
</blockquote>
<p>  @babel/preset-env 的参数 modules 的作用是什么?</p>
<p>  解: modules =&gt; 通过 babel 转化的模块导出是否为其他类型,默认模块导出为 ‘EsModule’,其他类型如 ‘commonjs’,’commonjs2’,’amd’ 等,设置为 false 表明不改变模块导出类型.</p>
<p>  @babel/preset-env 的参数 loose 的作用是什么?</p>
<p>  解: loose =&gt; 通过 babel 转化是否开启松散模式.</p>
<ul>
<li><p>何为 loose 松散模式?</p>
<p>解: babel 在转换时一般有两种转换模式: 松散模式(loose)与标准模式(normal),松散模式会转换为前端开发者最熟悉的简洁的 ES5 代码,而标准模式转换出的代码则更贴近 ES6 的语义.</p>
</li>
<li><p>loose 松散模式的优缺点?</p>
<ul>
<li>优点: 转换出的代码更加易读,体积更小,执行效率更高,对于老浏览器兼容性更好.</li>
<li>缺点: 对于原生 ES6 语法的代码转换时经常会出现问题.</li>
<li>总结: 基本上在使用时不会开启 loose 松散模式.</li>
</ul>
</li>
</ul>
<p>  @babel/preset-env 的参数 useBuiltIns 的作用是什么?</p>
<p>  解: 是用于根据 browserslist 的浏览器版本集合来兼容的动态 polyfill 策略.</p>
<ul>
<li><p>‘entry’</p>
<p>会将 browserslist 的所有浏览器版本不兼容的 polyfill 优先全部导入至 chunks 入口处.配合 <a href="mailto:&#x63;&#111;&#114;&#x65;&#x2d;&#106;&#115;&#64;&#x33;&#x2e;&#x78;">&#x63;&#111;&#114;&#x65;&#x2d;&#106;&#115;&#64;&#x33;&#x2e;&#x78;</a> 可实现按需加载,可自定义导入至入口的 polyfill 模块,PS: 必须是在 browserslist 所有浏览器版本不兼容的 polyfill 范围内.</p>
</li>
<li><p>‘usage’</p>
<p>会将 browserslist 的所有浏览器版本不兼容的 polyfill 根据模块使用处的 API 特定按需导入.</p>
</li>
<li><p>false(极不推荐)</p>
<p>会无视 browserslist 将所有的 @babel/polyfill 导入至 chunks 入口处.</p>
</li>
</ul>
<p>  @babel/preset-env 的参数 corejs 的作用是什么?</p>
<p>  解: 必须配合 useBuiltIns: ‘entry’ 或者 useBuiltIns: ‘usage’ 使用,基本上用于将未纳入 ECMASCRIPT 稳定语法的 proposal 新特性注入至 polyfill 中.</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">presets</span>: [[</span><br><span class="line">      <span class="string">&#x27;@babel/preset-env&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">useBuiltIns</span>: <span class="string">&#x27;usage&#x27;</span>,</span><br><span class="line">          <span class="attr">corejs</span>: &#123;</span><br><span class="line">              <span class="attr">version</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="attr">proposal</span>: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  ]]</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>css-loader</p>
</blockquote>
<p>  为何 css-loader options 参数 minimize 压缩功能失效?</p>
<p>  解: 通过查询,webpack 3.x =&gt; 4.x &amp;&amp; css-loader 0.x =&gt; 1.x 已经将 options minimize 参数压缩功能删掉.</p>
<blockquote>
<p>postcss-loader</p>
</blockquote>
<p>  为何选用 postcss-preset-env 替代 autoprefixer 来编译转化样式文件兼容浏览器呢?</p>
<p>  解: postcss 本质的作用就是将更多 css 的新样式、新特性兼容更多的浏览器.postcss-preset-env 中引用了 autoprefixer,且其比 autoprefixer 能编译转化 css 的新特性,这是 autoprefixer 中不存在的功能,如 color: #12345678 这样包括透明度的十六进制 css 颜色新特性,所以选用 postcss-preset-env 替代 autoprefixer 来编译转化样式文件.</p>
<p>  为何 postcss.config.js &gt; plugins 与 postcss-loader &gt; postcssOptions &gt; plugins 同时存在的情况下,两者同时生效?</p>
<p>  解: 两者同时存在的情况下,postcss.config.js &gt; plugins 不会被覆盖,而是会被继承合并同时生效.</p>
<p>  现在移动端分辨率适配使用的是 vw/vh 的策略,那么如何将 UI 图上的绝对像素值( px )动态转化为 vw 呢?</p>
<p>  首先要了解几个概念: </p>
<ul>
<li>vw/vh: 类似于百分比,不过是相对于理想视口设置的宽度以及高度.</li>
<li>理想视口: 在不实行缩放的情况下,将物理像素精确转化为各个设备的 CSS 像素(dpr)的环境.</li>
<li>DPR: DPR = 物理像素/分辨率.</li>
</ul>
<p>  使用 postcss-px-to-viewport 来将 px 动态转化为 vw.</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//postcss.config.js</span></span><br><span class="line"><span class="keyword">const</span> postcssConfig = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="string">&#x27;postcss-preset-env&#x27;</span>,</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&#x27;postcss-px-to-viewport&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">unitToConvert</span>: <span class="string">&#x27;px&#x27;</span>,</span><br><span class="line">                <span class="attr">unitPrecision</span>: <span class="number">8</span>,</span><br><span class="line">                <span class="attr">viewportUnit</span>: <span class="string">&#x27;vw&#x27;</span>,</span><br><span class="line">                <span class="attr">viewportWidth</span>: <span class="number">750</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = postcssConfig;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>url-loader</p>
</blockquote>
<p>  url-loader 与 file-loader 的区别是什么?</p>
<p>  解: url-loader 与 file-loader 在处理文件资源功能上面并没有很大的区别,url-loader 中是引用了 file-loader 的,但是 url-loader 根据参数限制能够转化为更小的文件资源 dataURI,比如图片 Base64.</p>
<blockquote>
<p>Asset Module</p>
</blockquote>
<p>  webpack 5.x 中对于资源模块的处理进行了升级优化,无需额外配置即可处理资源文件(字体，图标等).</p>
<p>  资源模块类型(asset module type),通过添加 4 种新的模块类型,来替换所有这些 loader:</p>
<ul>
<li>asset/resource 发送一个单独的文件并导出 URL.之前通过使用 file-loader 实现.</li>
<li>asset/inline 导出一个资源的 data URI.之前通过使用 url-loader 实现.</li>
<li>asset/source 导出资源的源代码.之前通过使用 raw-loader 实现.</li>
<li>asset 在导出一个 data URI 和发送一个单独的文件之间自动选择.之前通过使用 url-loader,并且配置资源体积限制实现.</li>
</ul>
<p>  asset 实际上可以理解为比较通用灵活的配置,通常开发时基本上使用 type: ‘asset’.</p>
<ul>
<li><p>generator</p>
<p>在配置 module.rules 时,可配置 generator 来对资源模块处理进行进一步控制,该配置有以下几个属性:</p>
<ul>
<li><p>filename</p>
<ul>
<li>值必须为相对路径,可改变资源输出的目录;</li>
<li>如果同时指定了该属性和 output.assetModuleFilename,将忽略 output.assetModuleFilename 的值;</li>
<li>该属性仅适用于 asset 和 asset/resource 资源类型.</li>
</ul>
</li>
<li><p>dataUrl</p>
<ul>
<li>在处理 inline 类型的资源时,该资源默认对资源进行 base64 编码,可通过该属性来改变其编码方式;</li>
<li>该属性值为函数,其签名为 (content: string) =&gt; string;</li>
<li>该属性仅适用于 asset 和 asset/inline 资源类型.</li>
</ul>
</li>
</ul>
</li>
<li><p>parser</p>
<ul>
<li><p>dataUrlCondition.maxSize:</p>
<ul>
<li>当 type 为 asset 时,如果资源大小小于 8kb,按照 asset/inline 的规则处理资源,否则按照 asset/resource 的规则处理资源;</li>
<li>可通过指定该属性来改变其界限值(单位为 byte);</li>
<li>该属性仅适用于 asset 资源类型.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>  示例:</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">      <span class="attr">rules</span>: [<span class="comment">//...</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.(bmp|gif|jpg|jpeg|gif)$/</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">          <span class="attr">generator</span>: &#123;</span><br><span class="line">              <span class="attr">publicPath</span>: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">              <span class="comment">// 注意,这里资源模块文件后缀[ext]与引入 loader 方式时有所不同,这里代表.bmp .png .gif .jpg .jpeg,而引入 loader 时,[ext] 是不含有 &#x27;.&#x27; 字符的.</span></span><br><span class="line">              <span class="attr">filename</span>: <span class="string">&#x27;assets/images/[name].[contenthash:6][ext]&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">parser</span>: &#123;</span><br><span class="line">              <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">                  <span class="attr">maxSize</span>: <span class="number">5</span> * <span class="number">1024</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//..</span></span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>raw-loader</p>
</blockquote>
<p>  在之前的移动端分辨率适配时,是使用相对像素值(rem)+动态计算元节点绝对像素值的策略,但是却会存在 raw-loader 内联资源必须下载低版本 0.5.1 的限制,为什么必须要下载低版本 0.5.1 的 raw-loader 呢?</p>
<p>  解: 首先了解几个概念: px2rem-loader、lib-flexible 以及 raw-loader.</p>
<ul>
<li>px2rem-loader: 用于将 px 绝对像素值转化为 rem 相对像素值.</li>
<li>lib-flexible: 用于动态计算元节点绝对像素值的工具.</li>
<li>raw-loader: 用于内联资源模块,导出文件资源的源代码.</li>
</ul>
<p>  新版本的 raw-loader 存在一些问题,查询了源代码后发现,导出的资源模块源代码模块导出类型为 ‘EsModule’,转化成字符串为’[object Object]‘,要对 raw-loader 进行处理,对其属性 esModule 设置为 false,就可解决必须下载低版本 0.5.1 的 raw-loader 的限制.</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 使用 raw-loader 内联资源模块之前  --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">  &lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">      &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">      &lt;title&gt;Webpack Emulate&lt;/title&gt;</span><br><span class="line">      &lt;script type=&quot;text/javascript&quot;&gt;&lt;%= require(&quot;raw-loader?esModule=false!babel-loader!../node_modules/lib-flexible/flexible&quot;) %&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;root-webpack&quot;&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 使用 raw-loader 内联资源模块之后  --&gt;</span><br><span class="line">&lt;!doctype html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Webpack Emulate&lt;/title&gt;</span><br><span class="line">  &lt;script&gt;;(function (win, lib) &#123;</span><br><span class="line">          var doc = win.document;</span><br><span class="line">          var docEl = doc.documentElement;</span><br><span class="line">          var metaEl = doc.querySelector(&#x27;meta[name=&quot;viewport&quot;]&#x27;);</span><br><span class="line">          var flexibleEl = doc.querySelector(&#x27;meta[name=&quot;flexible&quot;]&#x27;);</span><br><span class="line">          var dpr = 0;</span><br><span class="line">          var scale = 0;</span><br><span class="line">          var tid;</span><br><span class="line">          var flexible = lib.flexible || (lib.flexible = &#123;&#125;);</span><br><span class="line"></span><br><span class="line">          if (metaEl) &#123;</span><br><span class="line">              console.warn(&#x27;将根据已有的meta标签来设置缩放比例&#x27;);</span><br><span class="line">              var match = metaEl.getAttribute(&#x27;content&#x27;).match(/initial\-scale=([\d\.]+)/);</span><br><span class="line"></span><br><span class="line">              if (match) &#123;</span><br><span class="line">                  scale = parseFloat(match[1]);</span><br><span class="line">                  dpr = parseInt(1 / scale);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; else if (flexibleEl) &#123;</span><br><span class="line">              var content = flexibleEl.getAttribute(&#x27;content&#x27;);</span><br><span class="line"></span><br><span class="line">              if (content) &#123;</span><br><span class="line">                  var initialDpr = content.match(/initial\-dpr=([\d\.]+)/);</span><br><span class="line">                  var maximumDpr = content.match(/maximum\-dpr=([\d\.]+)/);</span><br><span class="line"></span><br><span class="line">                  if (initialDpr) &#123;</span><br><span class="line">                      dpr = parseFloat(initialDpr[1]);</span><br><span class="line">                      scale = parseFloat((1 / dpr).toFixed(2));</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  if (maximumDpr) &#123;</span><br><span class="line">                      dpr = parseFloat(maximumDpr[1]);</span><br><span class="line">                      scale = parseFloat((1 / dpr).toFixed(2));</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          if (!dpr &amp;&amp; !scale) &#123;</span><br><span class="line">              var isAndroid = win.navigator.appVersion.match(/android/gi);</span><br><span class="line">              var isIPhone = win.navigator.appVersion.match(/iphone/gi);</span><br><span class="line">              var devicePixelRatio = win.devicePixelRatio;</span><br><span class="line"></span><br><span class="line">              if (isIPhone) &#123;</span><br><span class="line">                  // iOS下，对于2和3的屏，用2倍的方案，其余的用1倍方案</span><br><span class="line">                  if (devicePixelRatio &gt;= 3 &amp;&amp; (!dpr || dpr &gt;= 3)) &#123;</span><br><span class="line">                      dpr = 3;</span><br><span class="line">                  &#125; else if (devicePixelRatio &gt;= 2 &amp;&amp; (!dpr || dpr &gt;= 2)) &#123;</span><br><span class="line">                      dpr = 2;</span><br><span class="line">                  &#125; else &#123;</span><br><span class="line">                      dpr = 1;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                  // 其他设备下，仍旧使用1倍的方案</span><br><span class="line">                  dpr = 1;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              scale = 1 / dpr;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          docEl.setAttribute(&#x27;data-dpr&#x27;, dpr);</span><br><span class="line"></span><br><span class="line">          if (!metaEl) &#123;</span><br><span class="line">              metaEl = doc.createElement(&#x27;meta&#x27;);</span><br><span class="line">              metaEl.setAttribute(&#x27;name&#x27;, &#x27;viewport&#x27;);</span><br><span class="line">              metaEl.setAttribute(&#x27;content&#x27;, &#x27;initial-scale=&#x27; + scale + &#x27;, maximum-scale=&#x27; + scale + &#x27;, minimum-scale=&#x27; + scale + &#x27;, user-scalable=no&#x27;);</span><br><span class="line"></span><br><span class="line">              if (docEl.firstElementChild) &#123;</span><br><span class="line">                  docEl.firstElementChild.appendChild(metaEl);</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                  var wrap = doc.createElement(&#x27;div&#x27;);</span><br><span class="line">                  wrap.appendChild(metaEl);</span><br><span class="line">                  doc.write(wrap.innerHTML);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          function refreshRem() &#123;</span><br><span class="line">              var width = docEl.getBoundingClientRect().width;</span><br><span class="line"></span><br><span class="line">              if (width / dpr &gt; 540) &#123;</span><br><span class="line">                  width = 540 * dpr;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              var rem = width / 10;</span><br><span class="line">              docEl.style.fontSize = rem + &#x27;px&#x27;;</span><br><span class="line">              flexible.rem = win.rem = rem;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          win.addEventListener(&#x27;resize&#x27;, function () &#123;</span><br><span class="line">              clearTimeout(tid);</span><br><span class="line">              tid = setTimeout(refreshRem, 300);</span><br><span class="line">          &#125;, false);</span><br><span class="line">          win.addEventListener(&#x27;pageshow&#x27;, function (e) &#123;</span><br><span class="line">              if (e.persisted) &#123;</span><br><span class="line">                  clearTimeout(tid);</span><br><span class="line">                  tid = setTimeout(refreshRem, 300);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;, false);</span><br><span class="line"></span><br><span class="line">          if (doc.readyState === &#x27;complete&#x27;) &#123;</span><br><span class="line">              doc.body.style.fontSize = 12 * dpr + &#x27;px&#x27;;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              doc.addEventListener(&#x27;DOMContentLoaded&#x27;, function (e) &#123;</span><br><span class="line">                  doc.body.style.fontSize = 12 * dpr + &#x27;px&#x27;;</span><br><span class="line">              &#125;, false);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          refreshRem();</span><br><span class="line">          flexible.dpr = win.dpr = dpr;</span><br><span class="line">          flexible.refreshRem = refreshRem;</span><br><span class="line"></span><br><span class="line">          flexible.rem2px = function (d) &#123;</span><br><span class="line">              var val = parseFloat(d) * this.rem;</span><br><span class="line"></span><br><span class="line">              if (typeof d === &#x27;string&#x27; &amp;&amp; d.match(/rem$/)) &#123;</span><br><span class="line">                  val += &#x27;px&#x27;;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              return val;</span><br><span class="line">          &#125;;</span><br><span class="line"></span><br><span class="line">          flexible.px2rem = function (d) &#123;</span><br><span class="line">              var val = parseFloat(d) / this.rem;</span><br><span class="line"></span><br><span class="line">              if (typeof d === &#x27;string&#x27; &amp;&amp; d.match(/px$/)) &#123;</span><br><span class="line">                  val += &#x27;rem&#x27;;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              return val;</span><br><span class="line">          &#125;;</span><br><span class="line">      &#125;)(window, window[&#x27;lib&#x27;] || (window[&#x27;lib&#x27;] = &#123;&#125;));&lt;/script&gt;&lt;link href=&quot;./css/index.5c90e18c.css&quot; rel=&quot;stylesheet&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;root-webpack&quot;&gt;&lt;/div&gt;&lt;script defer=&quot;defer&quot; src=&quot;./js/index_7b84cb4c006925aa2404.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>thread-loader</p>
</blockquote>
<p>  thread-loader 的原理是什么?</p>
<p>  解: webpack 每一次解析 loader 模块时,thread-loader 都会将它以及它所依赖的包分配给所对应的 worker 线程.</p>
<blockquote>
<p>loader-runner</p>
</blockquote>
<p>  loader-runner 的作用是什么?</p>
<p>  解: 是用于测试自定义的 loader 而存在的,可以使用 <a href="mailto:&#x6c;&#x6f;&#x61;&#100;&#x65;&#x72;&#45;&#117;&#x74;&#105;&#108;&#x73;&#x40;&#x32;&#46;&#120;">&#x6c;&#x6f;&#x61;&#100;&#x65;&#x72;&#45;&#117;&#x74;&#105;&#108;&#x73;&#x40;&#x32;&#46;&#120;</a> 中的 getOptions(this) 获取 loader &gt; options,由于不是在真实的 webpack 环境下,不可使用 this.getOptions(获取 loader -&gt; options),this.emitFile(生成文件) 等 API,PS: getOptions(this) 在 <a href="mailto:&#x6c;&#111;&#97;&#x64;&#x65;&#114;&#45;&#x75;&#x74;&#105;&#108;&#x73;&#64;&#51;&#x2e;&#120;">&#x6c;&#111;&#97;&#x64;&#x65;&#114;&#45;&#x75;&#x74;&#105;&#108;&#x73;&#64;&#51;&#x2e;&#120;</a> 中已经被剔除,在自定义的 loader 中直接使用 this.getOptions() 即可.</p>
<h4 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h4><blockquote>
<p>contentBase</p>
</blockquote>
<p>  为何在 devServer 设置 contentBase 失效?</p>
<p>  解: contentBase 指的是 devServer 本地代理服务的作用目录,一般设置为绝对路径,在 webpack 5.x 中改为 static,webpack 4.x 及其之前版本依然生效.</p>
<blockquote>
<p>historyApiFallback</p>
</blockquote>
<p>  devServer.historyApiFallback 的作用是什么?</p>
<p>  解: devServer 本地代理服务指定遇到 404 或者 错误时重定向的页面.</p>
<blockquote>
<p>allowedHosts</p>
</blockquote>
<p>  devServer.allowedHosts 的作用是什么?</p>
<p>  解: devServer 本地代理服务页面访问时 http 请求的白名单.</p>
<blockquote>
<p>https</p>
</blockquote>
<p>  devServer.https 的作用是什么?</p>
<p>  解: devServer 本地代理服务是否开启 https 安全协议.</p>
<blockquote>
<p>compress</p>
</blockquote>
<p>  devServer.compress 的作用是什么?</p>
<p>  解: devServer 本地代理服务是否开启 Gzip 压缩.</p>
<blockquote>
<p>open</p>
</blockquote>
<p>  devServer.open 的作用是什么?</p>
<p>  解: devServer 本地代理服务首次构建打包时,是否自动打开设备默认浏览器实行访问.</p>
<blockquote>
<p>hot</p>
</blockquote>
<p>  热加载的工作原理是什么?</p>
<p>  解: 首先要了解几个概念: webpack compile、bundle server、hmr server 以及 hmr runtime.</p>
<ul>
<li>webpack compile: 是将 js 转化成 bundleJs 的编译器,同时开启 webpack –watch 文件监听,并写入内存.</li>
<li>bundle server: 提供文件给浏览器实行访问.</li>
<li>hmr server: 将 Server 端热加载文件输出给 Client 端 hmr runtime.</li>
<li>hmr runtime: 注入至浏览器内存中;接受 hmr server 输出的热加载文件并实行更新.</li>
</ul>
<p>  工作原理: 首次编译,webpack compile 将 js 编译为 bundleJs,同时开启 webpack –watch 文件监听并写入内存,通过 bundler server 提供文件给浏览器实行访问,与此并行的是 hmr runtime 注入至浏览器内存中;接着文件监听轮询可监听的编辑文件是否发生变化,如果发生了变化,不会立即告知监听者,引起 webpack 重新构建打包,而是会放入至缓存中,在 aggregateTimeout 时间段内重复此类操作,等时间段结束之后,将缓存中的文件列表统一重新构建打包,之后通过 hmr server 将热加载文件输出给 hmr runtime,其中的文件传输协议为 websocket,传输数据格式为 JSON 格式,hmr runtime 接收到 hmr server 热加载文件实行更新.</p>
<h4 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h4><blockquote>
<p>friendly-errors-webpack-plugin</p>
</blockquote>
<p>  为何 friendly-errors-webpack-plugin 日志优化插件在 webpack 5.x 中不生效?</p>
<p>  解: friendly-errors-webpack-plugin 日志优化插件目前在 github 上已停止维护,其只能生效的 webpack 版本为 4.x 以及之前的版本,对于 webpack 5.x 无法下载使用.</p>
<blockquote>
<p>clean-webpack-plugin</p>
</blockquote>
<p>  如何选择性清空构建打包导出的位置目录内容?</p>
<p>  解: clean-webpack-plugin 存在一个参数属性 —— cleanOnceBeforeBuildPatterns.</p>
<ul>
<li>cleanOnceBeforeBuildPatterns: 用于筛选在 Webpack Compile 编译前实行清空的位置目录内容.</li>
</ul>
<p>  用此属性就可选择性清空构建打包导出的位置目录内容.</p>
<h4 id="commit-rules"><a href="#commit-rules" class="headerlink" title="commit rules"></a>commit rules</h4><blockquote>
<p>规范说明</p>
</blockquote>
<p>  现阶段大多数前端开发者遵从的 git commit message 规范都是 Angular 团队的 Angular commit message.</p>
  <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;  &lt;!-- 这一行为 header --&gt;</span><br><span class="line">&lt;breakLine&gt;</span><br><span class="line">&lt;body&gt;    </span><br><span class="line">&lt;breakLine&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>header: 分为三部分,type、scope 以及 subject.<ul>
<li>type: 表示提交类型.必填且必须为以下枚举之一: [‘build’, ‘chore’, ‘feat’, ‘fix’, ‘style’, ‘perf’, ‘docs’, ‘ci’, ‘test’, ‘refactor’].</li>
<li>scope: 表示项目内文件修改的范围,比如说 fix 修复 bug 时,选择 hooks 部分还是 component 部分,选填.</li>
<li>subject: 表示简要描述本次提交.必须遵循两个规则: 首字母不能大写,末尾不能添加 ‘.’ 字符,必填.</li>
</ul>
</li>
<li>body: 表示对本次提交的详细描述,选填.</li>
<li>footer: 分为两种情况,BREAKING CHANGES 以及 删除 issue,选填.<ul>
<li>BREAKING CHANGES: 与当前 API 产生了较大的不兼容时,如重构,会详细描述本次提交的 BREAKING CHANGES,必须以 BREAKING CHANGES 开头.</li>
<li>delete issue: 当需要删除本次 commit 所对应的 issue 时,也可详细描述.</li>
</ul>
</li>
</ul>
<blockquote>
<p>type enum</p>
</blockquote>
<ul>
<li>Angular commit message type.<ul>
<li>build: 初始化打包.</li>
<li>chore: 构建/依赖/工具.</li>
<li>feat: 新功能.</li>
<li>fix: 修复 Bug.</li>
<li>style: 代码样式美化.</li>
<li>perf: 性能优化.</li>
<li>docs: 文档变更.</li>
<li>test: 测试.</li>
<li>ci: CI related changes.</li>
<li>refactor: 重构.</li>
</ul>
</li>
<li>gitmoji commit message type.<ul>
<li>遵从且继承 Angular commit message type.</li>
<li>revert: 回滚.</li>
<li>wip: 建设进程中(不推荐使用).</li>
</ul>
</li>
</ul>
<blockquote>
<p>规范化工具</p>
</blockquote>
<p>  通常使用 commitizen + cz-customizable 来实现 gitmoji commit message 规范化.</p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;commitizen&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node_modules/cz-customizable&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.cz-config.js</span></span><br><span class="line"><span class="keyword">const</span> czConfig = &#123;</span><br><span class="line">    <span class="attr">types</span>: [&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;🍻 build: 初始化打包&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;:beers: build&#x27;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;📦️chore: 构建/依赖/工具&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;:package: chore&#x27;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;✨  feat: 新功能&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;:sparkles: feat&#x27;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;🐛 fix: 修复bug&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;:bug: fix&#x27;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;🎨 style: 代码样式优化&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;:art: style&#x27;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;📄 docs: 变更文档&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;:page_facing_up: docs&#x27;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;🚀 perf: 性能优化&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;:rocket: perf&#x27;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;✅  test: 测试&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;:white_check_mark: test&#x27;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;🔥 refactor: 重构&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;:fire: refactor&#x27;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;👷 ci: CI related changes&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;:construction_worker: ci&#x27;</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="attr">messages</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;请输入您本次提交类型(必填):&#x27;</span>,</span><br><span class="line">        <span class="attr">scope</span>: <span class="string">&#x27;请输入您本次提交修改范围:&#x27;</span>,</span><br><span class="line">        <span class="attr">customScope</span>: <span class="string">&#x27;请选择您本次提交修改范围:&#x27;</span>,</span><br><span class="line">        <span class="attr">subject</span>: <span class="string">&#x27;请简要描述本次提交(必填):&#x27;</span>,</span><br><span class="line">        <span class="attr">body</span>: <span class="string">&#x27;请对本次提交作详细描述:&#x27;</span>,</span><br><span class="line">        <span class="attr">breaking</span>: <span class="string">&#x27;请对本次提交与当前 API 产生比较大的不兼容作详细描述:&#x27;</span>,</span><br><span class="line">        <span class="attr">footer</span>: <span class="string">&#x27;请对本次提交删除的所对应的 issue 作详细描述:&#x27;</span>,</span><br><span class="line">        <span class="attr">confirmCommit</span>: <span class="string">&#x27;是否确认提交以上选择输入?&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">scopes</span>: [&#123;<span class="attr">name</span>: <span class="string">&#x27;components       [组件部分]&#x27;</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">&#x27;hooks            [hooks部分]&#x27;</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">&#x27;logics           [代码逻辑部分]&#x27;</span>&#125;],</span><br><span class="line">    <span class="attr">allowCustomScopes</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">allowEmptyScopes</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">customScopesName</span>: <span class="string">&#x27;custom           [自定义]&#x27;</span>,</span><br><span class="line">    <span class="attr">emptyScopesName</span>: <span class="string">&#x27;empty            [不指定]&#x27;</span>,</span><br><span class="line">    <span class="attr">allowBreakingChanges</span>: [<span class="string">&#x27;:sparkles: feat&#x27;</span>, <span class="string">&#x27;:bug: fix&#x27;</span>],</span><br><span class="line">    <span class="attr">subjectLimit</span>: <span class="number">80</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>强制校验 gitmoji commit message</p>
</blockquote>
<p>  通常使用 commitlint + husky + commitlint-config-gitmoji 来强制校验 git 提交时的 gitmoji commit message 规范.</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .commitlintrc.js</span></span><br><span class="line"><span class="keyword">const</span> commitlintrcConfig = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;gitmoji&#x27;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = commitlintrcConfig;</span><br></pre></td></tr></table></figure>

  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">husky</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成强制校验 git 操作的 hooks 容器.</span></span><br><span class="line">npx husky install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加强制校验 gitmoji commit message 规范的 hooks,并写入默认命令.</span></span><br><span class="line">npx husky add .husky/commet-msg &quot;yarn run test&quot;</span><br></pre></td></tr></table></figure>

  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">husky</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/env sh</span></span><br><span class="line">. &quot;$(dirname -- &quot;$0&quot;)/_/husky.sh&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">commitlint --edit 是对 git 最后一次本地提交进行强制校验,如若校验不通过则实行回退,本地提交不成功.</span></span><br><span class="line">npx --no-install commitlint --edit &quot;$1&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>强制生成 CHANGELOG</p>
</blockquote>
<p>  通常使用 husky + standard-version + conventional-changelog-gitmoji-config 来强制生成 CHANGELOG.md 文件.</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加强制校验 gitmoji commit message 规范的 hooks,并写入默认命令.</span></span><br><span class="line">npx husky add .husky/pre-push &quot;yarn run test&quot;</span><br></pre></td></tr></table></figure>

  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">husky</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/env sh</span></span><br><span class="line">. &quot;$(dirname -- &quot;$0&quot;)/_/husky.sh&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成 CHANGELOG.md 文件的规则遵循 conventional-changelog-gitmoji-config,不可进行自定义.</span></span><br><span class="line">npx --no-install standard-version --preset gitmoji-config</span><br></pre></td></tr></table></figure>

<h4 id="speed-optimization"><a href="#speed-optimization" class="headerlink" title="speed optimization"></a>speed optimization</h4><blockquote>
<p>best answer</p>
</blockquote>
<p>  实验证明, webpack 5.x 中使用 splitChunks 分割自定义公用模块,使用 DllPlugin + DllReferencePlugin 抽取公用依赖至 manifest.json 文件内做预编译文件,只需要构建打包一次,后续则不需要重新执行,可由此看出是速度优化的最佳答案.</p>
<blockquote>
<p>BREAKING CHANGES</p>
</blockquote>
<p>在 webpack 4.x 中做了一些速度优化升级:</p>
<ul>
<li>nodejs 必须下载 v8.5.0 以上的稳定版本才可使用,而新版本的 V8 带来了一些语法优化.<ul>
<li>for-of 替代 forEach.</li>
<li>Map、Set 替代 Object.</li>
<li>includes 替代 indexOf.</li>
</ul>
</li>
<li>使用更快的 md4 hash 加密算法.</li>
<li>webpack AST 可以直接通过 loader 传递给 AST,减少解析时间.</li>
<li>使用字符串方法替代正则表达式.</li>
</ul>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>unresolved problems</title>
    <url>/2022/09/20/unresolved-problems/</url>
    <content><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><h4 id="speed-measure-webpack-plugin"><a href="#speed-measure-webpack-plugin" class="headerlink" title="speed-measure-webpack-plugin"></a>speed-measure-webpack-plugin</h4><p>  为何 speed-measure-webpack-plugin 速度分析插件对于 webpack 5.x 的支持很有限制,如何完美的解决这些限制?</p>
<p>现阶段并没有发现解决的最完美的方式, speed-measure-webpack-plugin 速度分析插件对于 webpack 5.x 会出现以下两个问题:</p>
<p><img src="https://image.white-than-wood.zone/webpack/speed-measure-webpack-plugin-problem.png"></p>
<p>使用 .wrap 包裹后,会直接报 TypeError 类型错误,经过查询可知,官方给出的解决方案是,将 optimization.minimizer 的默认值去掉,也就是 ‘…’.<br>那就有疑问了,如果不合并 minimizer 默认值,对于prod 生产环境的打包速度分析时,我还需要额外下载 terser-webpack-webpack 对构建打包文件实行压缩混淆,还需要额外引入 new webpack.optimize.ModuleConcatenationPlugin 来开启 Scope Hoisting 吗?还是说要放弃 css-minimizer-webpack-plugin 压缩 css 文件,使用其他的比较麻烦的方案呢?这些方式勉强可以处理,但是都太得不偿失.<br>参考链接: <a href='https://github.com/stephencookdev/speed-measure-webpack-plugin/issues/171'>Not working with Webpack 5: “TypeError: Cannot create proxy with a non-object as target or handler”</a>.</p>
<p><img src="https://image.white-than-wood.zone/webpack/speed-measure-webpack-plugin-problem-ano.png"></p>
<p>即使按照官方的解决方案,去掉 optimization.minimizer 的默认值 ‘…’,也会报 “You forgot to add ‘mini-css-extract-plugin’ plugin” 这个问题,针对于此官方的解决方案是,先试用 speed-measure-webpack-plugin 速度分析,而后再将 mini-css-extract-plugin 抽取 css 文件插件添加到 webpack plugins 中.感觉还是好愚蠢的做法,很不优雅而且多余.<br>参考链接: <a href='https://github.com/stephencookdev/speed-measure-webpack-plugin/issues/167#issuecomment-976836861'>“You forgot to add ‘mini-css-extract-plugin’ plugin”</a>.</p>
]]></content>
      <categories>
        <category>unresolved</category>
      </categories>
      <tags>
        <tag>unresolved</tag>
      </tags>
  </entry>
  <entry>
    <title>create Simplepack</title>
    <url>/2022/10/14/create-simplepack/</url>
    <content><![CDATA[<h1 id="create-Simplepack"><a href="#create-Simplepack" class="headerlink" title="create Simplepack"></a>create Simplepack</h1><p>搭建一个简易的 webpack —— Simplepack.</p>
<blockquote>
<p>配置文件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// simplepack.config.js</span></span><br><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">OUTPUT_DIR</span> = <span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), <span class="string">&#x27;./build&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> simplepackConfig = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="comment">// 作为 simplepack 构建打包的出口</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">// 作为 simplepack 构建打包文件导出的位置目录</span></span><br><span class="line">        <span class="attr">path</span>: <span class="variable constant_">OUTPUT_DIR</span>,</span><br><span class="line">        <span class="comment">// 作为 simplepack 构建打包导出文件的名称</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;main.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = simplepackConfig;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>目录</p>
</blockquote>
<p><img src="https://image.white-than-wood.zone/webpack/simplepack_path.png"></p>
<blockquote>
<p>Simplepack</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;writeFileSync&#125; = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>); </span><br><span class="line">    </span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;../utils&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Simplepack</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">options</span> = options;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">resources</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行</span></span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;entry = <span class="string">&#x27;&#x27;</span>&#125; = <span class="variable language_">this</span>.<span class="property">options</span>;</span><br><span class="line">        <span class="keyword">if</span> (entry) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;找不到 webpack 构建打包的入口!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 递归获取资源列表</span></span><br><span class="line">        (<span class="keyword">function</span> <span class="title function_">getResources</span>(<span class="params">path, sourcePath</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> compile = <span class="variable language_">this</span>.<span class="title function_">compile</span>(path);</span><br><span class="line">            compile.<span class="property">filename</span> = sourcePath ? sourcePath : path;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">resources</span>.<span class="title function_">push</span>(compile);</span><br><span class="line">            <span class="keyword">const</span> &#123;dependencies = []&#125; = compile;</span><br><span class="line">            <span class="keyword">if</span> (dependencies.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 路径中是否存在类型文件</span></span><br><span class="line">                <span class="keyword">const</span> hasFile = <span class="regexp">/\.js$/</span>;</span><br><span class="line">                dependencies.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> sourcePath = item;</span><br><span class="line">                    <span class="comment">// 拼接父子依赖目录</span></span><br><span class="line">                    <span class="keyword">if</span> (hasFile.<span class="title function_">test</span>(path)) &#123;</span><br><span class="line">                        path = path.<span class="title function_">slice</span>(<span class="number">0</span>, path.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;/&#x27;</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!hasFile.<span class="title function_">test</span>(item)) &#123;</span><br><span class="line">                        item += <span class="string">&#x27;/index.js&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    path = <span class="title function_">resolve</span>(path, item);</span><br><span class="line">                    <span class="comment">// 将拼接好的子依赖目录再次解析</span></span><br><span class="line">                    getResources.<span class="title function_">call</span>(<span class="variable language_">this</span>, path, sourcePath);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>))(entry);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">emitFile</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析</span></span><br><span class="line">    <span class="title function_">compile</span>(<span class="params">path</span>) &#123;</span><br><span class="line">        <span class="comment">// 对相对路径进行校验,将相对路径转化为绝对路径</span></span><br><span class="line">        <span class="keyword">const</span> isRelative = <span class="regexp">/\.\/|\.\\/</span>;</span><br><span class="line">        <span class="keyword">if</span> (isRelative.<span class="title function_">test</span>(path)) &#123;</span><br><span class="line">            path = <span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取入口或者依赖模块的 AST 抽象语法树</span></span><br><span class="line">        <span class="keyword">const</span> ast = utils.<span class="title function_">getAST</span>(path);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// 获取相关依赖列表</span></span><br><span class="line">            <span class="attr">dependencies</span>: utils.<span class="title function_">getDependencies</span>(ast),</span><br><span class="line">            <span class="comment">// 获取相关代码</span></span><br><span class="line">            <span class="attr">source</span>: utils.<span class="title function_">getTransformFromAST</span>(ast)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成文件</span></span><br><span class="line">    <span class="title function_">emitFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;entry = <span class="string">&#x27;&#x27;</span>, <span class="attr">output</span>: &#123;filename = <span class="string">&#x27;&#x27;</span>, path = <span class="string">&#x27;&#x27;</span>&#125;&#125; = <span class="variable language_">this</span>.<span class="property">options</span>;</span><br><span class="line">        <span class="keyword">const</span> outputPath = <span class="title function_">resolve</span>(path, filename);</span><br><span class="line">        <span class="comment">// 模拟 webpack IIFE 自执行函数表达式闭包,将每一个模块外加一层包裹,并将 import 转化为 __WEBPACK_REQUIRE__</span></span><br><span class="line">        <span class="keyword">const</span> <span class="variable language_">module</span> = <span class="variable language_">this</span>.<span class="property">resources</span>.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="string">`&#x27;<span class="subst">$&#123;item.filename&#125;</span>&#x27;: function(require, modules, exports) &#123;<span class="subst">$&#123;item.source&#125;</span>`</span>).<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> bundle = <span class="string">`(function (module) &#123;</span></span><br><span class="line"><span class="string">            function require(filename) &#123;</span></span><br><span class="line"><span class="string">                var fn = module[filename];</span></span><br><span class="line"><span class="string">                var modules = &#123;exports: &#123;&#125;&#125;;</span></span><br><span class="line"><span class="string">                fn(require, modules, modules.exports);</span></span><br><span class="line"><span class="string">                return modules.exports;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            require(&#x27;<span class="subst">$&#123;entry&#125;</span>&#x27;);</span></span><br><span class="line"><span class="string">        &#125;)(&#123;<span class="subst">$&#123;<span class="variable language_">module</span>&#125;</span>&#125;)`</span>;</span><br><span class="line">        <span class="title function_">writeFileSync</span>(outputPath, bundle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Simplepack Parse 解析工具</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;readFileSync&#125; = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;parse&#125; = <span class="built_in">require</span>(<span class="string">&#x27;babylon&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;traverse, transformFromAST&#125; = <span class="built_in">require</span>(<span class="string">&#x27;@babel/core&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> utils = &#123;</span><br><span class="line">    <span class="comment">// 通过 babylon 解析入口或者依赖模块的抽象语法树</span></span><br><span class="line">    <span class="title function_">getAST</span>(<span class="params">path</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> content = <span class="title function_">readFileSync</span>(path, <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">parse</span>(content, &#123;</span><br><span class="line">            <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 通过 traverse 遍历获取 import 导入的依赖模块</span></span><br><span class="line">    <span class="title function_">getDependencies</span>(<span class="params">ast</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> dependencies = [];</span><br><span class="line">        <span class="title function_">traverse</span>(ast, &#123;</span><br><span class="line">            <span class="title class_">ImportDeclaration</span>(&#123;node&#125;) &#123;</span><br><span class="line">                dependencies.<span class="title function_">push</span>(node.<span class="property">source</span>.<span class="property">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> dependencies;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 通过 transformFromAST 获取被 babel 处理后的代码</span></span><br><span class="line">    <span class="title function_">getTransformFromAST</span>(<span class="params">ast</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;code&#125; = <span class="title function_">transformFromAST</span>(ast, <span class="literal">null</span>, &#123;</span><br><span class="line">            <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = utils;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Result</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"><span class="variable language_">module</span></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">require</span>(<span class="params">filename</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> fn = <span class="variable language_">module</span>[filename];</span><br><span class="line">        <span class="keyword">var</span> modules = &#123;<span class="attr">exports</span>: &#123;&#125;&#125;;</span><br><span class="line">        <span class="title function_">fn</span>(<span class="built_in">require</span>, modules, <span class="built_in">exports</span>);</span><br><span class="line">        <span class="keyword">return</span> modules.<span class="property">exports</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;./src/index.js&#x27;</span>);</span><br><span class="line">&#125;)(&#123;</span><br><span class="line">    <span class="string">&#x27;./src/index.js&#x27;</span>: <span class="keyword">function</span> (<span class="params"><span class="built_in">require</span>, modules, <span class="built_in">exports</span></span>) &#123;<span class="string">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> _modules = <span class="built_in">require</span>(<span class="string">&quot;./modules&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> wtw = (<span class="number">0</span>, _modules.<span class="property">getName</span>)(<span class="string">&#x27;wtw&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;wtw&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(wtw);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;./modules&#x27;</span>: <span class="keyword">function</span> (<span class="params"><span class="built_in">require</span>, modules, <span class="built_in">exports</span></span>) &#123;<span class="string">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="string">&quot;__esModule&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">value</span>: <span class="literal">true</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">exports</span>.<span class="property">getName</span> = getName;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params">name</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;My name is &quot;</span>.<span class="title function_">concat</span>(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>think of tapable</title>
    <url>/2022/10/15/think-of-tapable/</url>
    <content><![CDATA[<h1 id="Tapable"><a href="#Tapable" class="headerlink" title="Tapable"></a>Tapable</h1><blockquote>
<p>什么是 Tapable</p>
</blockquote>
<p>  简单来说,类似于 EventEmitter 的一种发布订阅模式,也就是观察者模式,但不同的是,Tapable 的流程以及应用场景要广泛复杂的多.Tapable 作为 Webpack 的主要骨架而流行,因此也受到前端开发爱好者的研究.</p>
<blockquote>
<p>订阅模式类型 —— Hook</p>
</blockquote>
<p>  在 Tapable 中订阅模式类型被称为 Hook,也就是 “钩子”,基本分为四种.</p>
<ul>
<li>普通钩子</li>
<li>熔断钩子</li>
<li>瀑布钩子</li>
<li>循环钩子</li>
</ul>
<p>  在此分类基础上,再添加发布时同步(Sync)、异步(Async)以及 Promise 的区分.</p>
<blockquote>
<p>整体源码分析</p>
</blockquote>
<p>  先按照整体流程大体看一遍源码,再具体分析各个分类,就先拿最简单 SyncHook 同步普通钩子举例.</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    MIT License http://www.opensource.org/licenses/mit-license.php</span></span><br><span class="line"><span class="comment">    Author Tobias Koppers @sokra</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Hook</span> = <span class="built_in">require</span>(<span class="string">&quot;./Hook&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HookCodeFactory</span> = <span class="built_in">require</span>(<span class="string">&quot;./HookCodeFactory&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内容则是由 HookCodeFactory 生成</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SyncHookCodeFactory</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HookCodeFactory</span> &#123;</span><br><span class="line">    <span class="title function_">content</span>(<span class="params">&#123; onError, onDone, rethrowIfPossible &#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">callTapsSeries</span>(&#123;</span><br><span class="line">            <span class="attr">onError</span>: <span class="function">(<span class="params">i, err</span>) =&gt;</span> <span class="title function_">onError</span>(err),</span><br><span class="line">            onDone,</span><br><span class="line">            rethrowIfPossible</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> factory = <span class="keyword">new</span> <span class="title class_">SyncHookCodeFactory</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承自 Hook 源类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SyncHook</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Hook</span> &#123;</span><br><span class="line">    <span class="comment">// 同步的订阅模式类型 Hook 不能调用 tapAsync、tapPromise 异步订阅方法</span></span><br><span class="line">    <span class="title function_">tapAsync</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;tapAsync is not supported on a SyncHook&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">tapPromise</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;tapPromise is not supported on a SyncHook&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 编译方法生成并导出最终的函数</span></span><br><span class="line">    <span class="title function_">compile</span>(<span class="params">options</span>) &#123;</span><br><span class="line">        factory.<span class="title function_">setup</span>(<span class="variable language_">this</span>, options);</span><br><span class="line">        <span class="keyword">return</span> factory.<span class="title function_">create</span>(options);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">SyncHook</span>;</span><br></pre></td></tr></table></figure>

<p>  可以看出每一种订阅模式类型 Hook 是继承自 Hook 源类,而内容则是由 HookCodeFactory 生成的,特定的订阅模式类型也会做对应的限制,如同步订阅类型的 Hook 只能调用 tap 同步订阅方法,却不能调用其他异步订阅方法.继续看 Hook 源类,备注会详细说明每个主要的方法做的事情.</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    MIT License http://www.opensource.org/licenses/mit-license.php</span></span><br><span class="line"><span class="comment">    Author Tobias Koppers @sokra</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hook</span> &#123;</span><br><span class="line">    <span class="comment">// 构造对象拥有的属性</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">args</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(args)) args = [];</span><br><span class="line">        <span class="comment">// 构造时指定的参数名称和个数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_args</span> = args;</span><br><span class="line">        <span class="comment">// 订阅的方法集合</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">taps</span> = [];</span><br><span class="line">        <span class="comment">// 拦截器集合</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">interceptors</span> = [];</span><br><span class="line">        <span class="comment">// 不同类型的发布方法拥有不同处理订阅模式的方式</span></span><br><span class="line">        <span class="comment">// call 对应 sync (同步)</span></span><br><span class="line">        <span class="comment">// promise 对应 promise 处理</span></span><br><span class="line">        <span class="comment">// callAsync 对应 async (异步)</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">call</span> = <span class="variable language_">this</span>.<span class="property">_call</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">promise</span> = <span class="variable language_">this</span>.<span class="property">_promise</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">callAsync</span> = <span class="variable language_">this</span>.<span class="property">_callAsync</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_x</span> = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">compile</span>(<span class="params">options</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Abstract: should be overriden&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将根据发布时的类型、构造时指定的参数名称、拦截器以及订阅的方法集合编译生成</span></span><br><span class="line">    <span class="title function_">_createCall</span>(<span class="params">type</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">compile</span>(&#123;</span><br><span class="line">            <span class="attr">taps</span>: <span class="variable language_">this</span>.<span class="property">taps</span>,</span><br><span class="line">            <span class="attr">interceptors</span>: <span class="variable language_">this</span>.<span class="property">interceptors</span>,</span><br><span class="line">            <span class="attr">args</span>: <span class="variable language_">this</span>.<span class="property">_args</span>,</span><br><span class="line">            <span class="attr">type</span>: type</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步订阅模式类型处理方法</span></span><br><span class="line">    <span class="title function_">tap</span>(<span class="params">options, fn</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> options === <span class="string">&quot;string&quot;</span>) options = &#123; <span class="attr">name</span>: options &#125;;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        options = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;sync&quot;</span>, <span class="attr">fn</span>: fn &#125;, options);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">_insert</span>(options);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步订阅模式类型处理方法</span></span><br><span class="line">    <span class="title function_">tapAsync</span>(<span class="params">options, fn</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> options === <span class="string">&quot;string&quot;</span>) options = &#123; <span class="attr">name</span>: options &#125;;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        options = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;async&quot;</span>, <span class="attr">fn</span>: fn &#125;, options);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">_insert</span>(options);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// promise 订阅模式类型处理方法</span></span><br><span class="line">    <span class="title function_">tapPromise</span>(<span class="params">options, fn</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> options === <span class="string">&quot;string&quot;</span>) options = &#123; <span class="attr">name</span>: options &#125;;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        options = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;promise&quot;</span>, <span class="attr">fn</span>: fn &#125;, options);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">_insert</span>(options);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不同类型的发布方法拥有不同处理订阅模式的方式</span></span><br><span class="line">    <span class="comment">// call 对应 sync (同步)</span></span><br><span class="line">    <span class="comment">// promise 对应 promise 处理</span></span><br><span class="line">    <span class="comment">// callAsync 对应 async (异步)</span></span><br><span class="line">    <span class="title function_">_resetCompilation</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">call</span> = <span class="variable language_">this</span>.<span class="property">_call</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">callAsync</span> = <span class="variable language_">this</span>.<span class="property">_callAsync</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">promise</span> = <span class="variable language_">this</span>.<span class="property">_promise</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最终会按照 &#123;type: string, name: string, fn: Function&#125; 的方式添加至订阅方法集合中.</span></span><br><span class="line">    <span class="comment">//           type: 必填,必须为 &#x27;sync&#x27;、&#x27;async&#x27; 和 &#x27;promise&#x27; 三种枚举选项之一.</span></span><br><span class="line">    <span class="comment">//           name: 必填,添加订阅方法时做的简要描述.</span></span><br><span class="line">    <span class="comment">//           fn: 必填,添加的订阅方法本身.</span></span><br><span class="line">    <span class="title function_">_insert</span>(<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">_resetCompilation</span>();</span><br><span class="line">        <span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">taps</span>.<span class="property">length</span>;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">taps</span>[i] = item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个函数,而这个函数也就是发布时调用的 call(args1), callAsync(args1, callback), promise(args1)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createCompileDelegate</span>(<span class="params">name, type</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">lazyCompileHook</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>[name] = <span class="variable language_">this</span>.<span class="title function_">_createCall</span>(type);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>[name](...args);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hook 源类原型链自带 _call、_promise、_callAsync 方法.</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(<span class="title class_">Hook</span>.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">    <span class="attr">_call</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="title function_">createCompileDelegate</span>(<span class="string">&quot;call&quot;</span>, <span class="string">&quot;sync&quot;</span>),</span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">_promise</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="title function_">createCompileDelegate</span>(<span class="string">&quot;promise&quot;</span>, <span class="string">&quot;promise&quot;</span>),</span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">_callAsync</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="title function_">createCompileDelegate</span>(<span class="string">&quot;callAsync&quot;</span>, <span class="string">&quot;async&quot;</span>),</span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Hook</span>;</span><br></pre></td></tr></table></figure>

<p>  可以看出 Hook 的源类经过一番整合处理,将根据发布时的类型、构造时指定的参数名称、拦截器以及订阅的方法集合通过编译生成,最终都指向了 compile 方法内的 HookCodeFactory 构造对象.那么最终需要克服的就是 HookCodeFactory 类,备注会详细说明每个主要的方法做的事情.</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    MIT License http://www.opensource.org/licenses/mit-license.php</span></span><br><span class="line"><span class="comment">    Author Tobias Koppers @sokra</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HookCodeFactory</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">config</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">config</span> = config;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">options</span> = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_args</span> = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化后,根据不同的发布时的类型,返回填充不同的内容的匿名函数.</span></span><br><span class="line">    <span class="title function_">create</span>(<span class="params">options</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">init</span>(options);</span><br><span class="line">        <span class="keyword">let</span> fn;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">type</span>) &#123;</span><br><span class="line">            <span class="comment">// 这里后续会更加详尽对比的做讲解</span></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将构造对象属性重置</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">deinit</span>();</span><br><span class="line">        <span class="keyword">return</span> fn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将处理后订阅方法的集合指向构造对象本身,相当于 this._x = [fn1, fn2, fn3, fn4, ...]</span></span><br><span class="line">    <span class="title function_">setup</span>(<span class="params">instance, options</span>) &#123;</span><br><span class="line">        instance.<span class="property">_x</span> = options.<span class="property">taps</span>.<span class="title function_">map</span>(<span class="function"><span class="params">t</span> =&gt;</span> t.<span class="property">fn</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">&#123; type: &quot;sync&quot; | &quot;promise&quot; | &quot;async&quot;, taps: Array&lt;Tap&gt;, interceptors: Array&lt;Interceptor&gt; </span>&#125;&#125; options</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 实行初始化,将传入的参数以及参数中构造时指定的参数名称进行构造对象属性赋值</span></span><br><span class="line">    <span class="comment">// this.options = &#123;taps: [&#123;type: string, fn: Function, name: string&#125;], type: string, interceptors: Array&lt;Interceptor&gt;, args: Array&lt;String&gt;&#125;</span></span><br><span class="line">    <span class="comment">// this.args = Array&lt;String&gt;</span></span><br><span class="line">    <span class="title function_">init</span>(<span class="params">options</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">options</span> = options;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_args</span> = options.<span class="property">args</span>.<span class="title function_">slice</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将构造对象属性重置</span></span><br><span class="line">    <span class="title function_">deinit</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">options</span> = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_args</span> = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里后续会更加详尽对比的做讲解</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">HookCodeFactory</span>;</span><br></pre></td></tr></table></figure>
<p>  由上面的流程,可以基本理清 Tapable Hook 发布订阅模式的关系图,其实还是比较简单的:</p>
<p>  <img src="https://image.white-than-wood.zone/webpack/tapable.png"></p>
<p>  接下来将是重头戏,将根据不同的订阅模式类型、不同的发布类型以及构造时指定的参数名称编译生成拼接好不同的内容的匿名函数.</p>
<ul>
<li><p>首先是根据不同的发布类型以及构造时指定的参数名称实行第一步拼接.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">type</span>) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;sync&quot;</span>:</span><br><span class="line">      fn = <span class="keyword">new</span> <span class="title class_">Function</span>(</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">args</span>(),</span><br><span class="line">          <span class="string">&#x27;&quot;use strict&quot;;\n&#x27;</span> +</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">header</span>() +</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">content</span>(&#123;</span><br><span class="line">              <span class="attr">onError</span>: <span class="function"><span class="params">err</span> =&gt;</span> <span class="string">`throw <span class="subst">$&#123;err&#125;</span>;\n`</span>,</span><br><span class="line">              <span class="attr">onResult</span>: <span class="function"><span class="params">result</span> =&gt;</span> <span class="string">`return <span class="subst">$&#123;result&#125;</span>;\n`</span>,</span><br><span class="line">              <span class="attr">resultReturns</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">onDone</span>: <span class="function">() =&gt;</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line">              <span class="attr">rethrowIfPossible</span>: <span class="literal">true</span></span><br><span class="line">          &#125;)</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;async&quot;</span>:</span><br><span class="line">      fn = <span class="keyword">new</span> <span class="title class_">Function</span>(</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">args</span>(&#123;</span><br><span class="line">              <span class="attr">after</span>: <span class="string">&quot;_callback&quot;</span></span><br><span class="line">          &#125;),</span><br><span class="line">          <span class="string">&#x27;&quot;use strict&quot;;\n&#x27;</span> +</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">header</span>() +</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">content</span>(&#123;</span><br><span class="line">              <span class="attr">onError</span>: <span class="function"><span class="params">err</span> =&gt;</span> <span class="string">`_callback(<span class="subst">$&#123;err&#125;</span>);\n`</span>,</span><br><span class="line">              <span class="attr">onResult</span>: <span class="function"><span class="params">result</span> =&gt;</span> <span class="string">`_callback(null, <span class="subst">$&#123;result&#125;</span>);\n`</span>,</span><br><span class="line">              <span class="attr">onDone</span>: <span class="function">() =&gt;</span> <span class="string">&quot;_callback();\n&quot;</span></span><br><span class="line">          &#125;)</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;promise&quot;</span>:</span><br><span class="line">      <span class="keyword">let</span> errorHelperUsed = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">const</span> content = <span class="variable language_">this</span>.<span class="title function_">content</span>(&#123;</span><br><span class="line">          <span class="attr">onError</span>: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">              errorHelperUsed = <span class="literal">true</span>;</span><br><span class="line">              <span class="keyword">return</span> <span class="string">`_error(<span class="subst">$&#123;err&#125;</span>);\n`</span>;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">onResult</span>: <span class="function"><span class="params">result</span> =&gt;</span> <span class="string">`_resolve(<span class="subst">$&#123;result&#125;</span>);\n`</span>,</span><br><span class="line">          <span class="attr">onDone</span>: <span class="function">() =&gt;</span> <span class="string">&quot;_resolve();\n&quot;</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">let</span> code = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      code += <span class="string">&#x27;&quot;use strict&quot;;\n&#x27;</span>;</span><br><span class="line">      code += <span class="string">&quot;return new Promise((_resolve, _reject) =&gt; &#123;\n&quot;</span>;</span><br><span class="line">      <span class="keyword">if</span> (errorHelperUsed) &#123;</span><br><span class="line">          code += <span class="string">&quot;var _sync = true;\n&quot;</span>;</span><br><span class="line">          code += <span class="string">&quot;function _error(_err) &#123;\n&quot;</span>;</span><br><span class="line">          code += <span class="string">&quot;if(_sync)\n&quot;</span>;</span><br><span class="line">          code += <span class="string">&quot;_resolve(Promise.resolve().then(() =&gt; &#123; throw _err; &#125;));\n&quot;</span>;</span><br><span class="line">          code += <span class="string">&quot;else\n&quot;</span>;</span><br><span class="line">          code += <span class="string">&quot;_reject(_err);\n&quot;</span>;</span><br><span class="line">          code += <span class="string">&quot;&#125;;\n&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      code += <span class="variable language_">this</span>.<span class="title function_">header</span>();</span><br><span class="line">      code += content;</span><br><span class="line">      <span class="keyword">if</span> (errorHelperUsed) &#123;</span><br><span class="line">          code += <span class="string">&quot;_sync = false;\n&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      code += <span class="string">&quot;&#125;);\n&quot;</span>;</span><br><span class="line">      fn = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="variable language_">this</span>.<span class="title function_">args</span>(), code);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">      MIT License http://www.opensource.org/licenses/mit-license.php</span></span><br><span class="line"><span class="comment">      Author Tobias Koppers @sokra</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HookCodeFactory</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="title function_">header</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> code = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">needContext</span>()) &#123;</span><br><span class="line">            code += <span class="string">&quot;var _context = &#123;&#125;;\n&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            code += <span class="string">&quot;var _context;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        code += <span class="string">&quot;var _x = this._x;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">interceptors</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            code += <span class="string">&quot;var _taps = this.taps;\n&quot;</span>;</span><br><span class="line">            code += <span class="string">&quot;var _interceptors = this.interceptors;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">interceptors</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> interceptor = <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">interceptors</span>[i];</span><br><span class="line">            <span class="keyword">if</span> (interceptor.<span class="property">call</span>) &#123;</span><br><span class="line">                code += <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.getInterceptor(i)&#125;</span>.call(<span class="subst">$&#123;<span class="variable language_">this</span>.args(&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">                    before: interceptor.context ? <span class="string">&quot;_context&quot;</span> : <span class="literal">undefined</span></span></span></span><br><span class="line"><span class="subst"><span class="string">                &#125;)&#125;</span>);\n`</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">      MIT License http://www.opensource.org/licenses/mit-license.php</span></span><br><span class="line"><span class="comment">      Author Tobias Koppers @sokra</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HookCodeFactory</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="title function_">args</span>(<span class="params">&#123;before, after&#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> allArgs = <span class="variable language_">this</span>.<span class="property">_args</span>;</span><br><span class="line">        <span class="keyword">if</span> (before) allArgs = [before].<span class="title function_">concat</span>(allArgs);</span><br><span class="line">        <span class="keyword">if</span> (after) allArgs = allArgs.<span class="title function_">concat</span>(after);</span><br><span class="line">        <span class="keyword">if</span> (allArgs.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> allArgs.<span class="title function_">join</span>(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加上 header 以及 args 部分,乍看起来是有点多的,可以使用伪代码来简化流程:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fn</span><br><span class="line">if &#x27;sync&#x27;</span><br><span class="line">  fn = args + header + content</span><br><span class="line">if &#x27;async&#x27;</span><br><span class="line">  fn = args with _callback + header + content</span><br><span class="line">if &#x27;promise&#x27;</span><br><span class="line">  fn = (args + header + content) with new Promise</span><br></pre></td></tr></table></figure>

<p>也可以转化为实际拼接好的 JS 代码来表示流程:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">call</span> = <span class="keyword">function</span> <span class="title function_">lazyCompileHook</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">function</span> (<span class="params">args1, args2</span>) &#123;</span><br><span class="line">      <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">      <span class="keyword">var</span> _context;</span><br><span class="line">      <span class="keyword">var</span> _x = <span class="variable language_">this</span>.<span class="property">_x</span>;</span><br><span class="line">      <span class="comment">// content(&#123;onError, onResult, resultReturns, onDone, rethrowIfPossible&#125;);</span></span><br><span class="line">  &#125;)(...args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">callAsync</span> = <span class="keyword">function</span> <span class="title function_">lazyCompileHook</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">function</span> (<span class="params">args1, args2, _callback</span>) &#123;</span><br><span class="line">      <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">      <span class="keyword">var</span> _context;</span><br><span class="line">      <span class="keyword">var</span> _x = <span class="variable language_">this</span>.<span class="property">_x</span>;</span><br><span class="line">      <span class="comment">// content(&#123;onError, onResult, onDone&#125;);</span></span><br><span class="line">  &#125;)(...args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">promise</span> = <span class="keyword">function</span> <span class="title function_">lazyCompileHook</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">function</span> (<span class="params">args1, args2, _callback</span>) &#123;</span><br><span class="line">      <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">_resolve, _reject</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> _context;</span><br><span class="line">          <span class="keyword">var</span> _x = <span class="variable language_">this</span>.<span class="property">x</span>;</span><br><span class="line">          <span class="comment">// content(&#123;onError, onResult, onDone&#125;);</span></span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;)(...args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>接着着重看下一个部分,也就是根据不同的订阅模式类型实行最后的拼接.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先看 SyncxxxHook 部分,除了循环钩子,调用的都是 callTapsSeries 方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HookCodeFactory</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="title function_">callTapsSeries</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">                       onError,</span></span><br><span class="line"><span class="params">                       onResult,</span></span><br><span class="line"><span class="params">                       resultReturns,</span></span><br><span class="line"><span class="params">                       onDone,</span></span><br><span class="line"><span class="params">                       doneReturns,</span></span><br><span class="line"><span class="params">                       rethrowIfPossible</span></span><br><span class="line"><span class="params">                   &#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">taps</span>.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="title function_">onDone</span>();</span><br><span class="line">        <span class="keyword">const</span> firstAsync = <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">taps</span>.<span class="title function_">findIndex</span>(<span class="function"><span class="params">t</span> =&gt;</span> t.<span class="property">type</span> !== <span class="string">&quot;sync&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> somethingReturns = resultReturns || doneReturns || <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">let</span> code = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">let</span> current = onDone;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">taps</span>.<span class="property">length</span> - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">const</span> i = j;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="keyword">const</span> done = current;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="keyword">const</span> content = <span class="variable language_">this</span>.<span class="title function_">callTap</span>(i, &#123;</span><br><span class="line">                <span class="attr">onError</span>: <span class="function"><span class="params">error</span> =&gt;</span> <span class="title function_">onError</span>(i, error, done, doneBreak),</span><br><span class="line">                <span class="attr">onResult</span>:</span><br><span class="line">                    onResult &amp;&amp;</span><br><span class="line">                    (<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="title function_">onResult</span>(i, result, done, doneBreak);</span><br><span class="line">                    &#125;),</span><br><span class="line">                <span class="attr">onDone</span>: !onResult &amp;&amp; done,</span><br><span class="line">                <span class="attr">rethrowIfPossible</span>:</span><br><span class="line">                    rethrowIfPossible &amp;&amp; (firstAsync &lt; <span class="number">0</span> || i &lt; firstAsync)</span><br><span class="line">            &#125;);</span><br><span class="line">            current = <span class="function">() =&gt;</span> content;</span><br><span class="line">        &#125;</span><br><span class="line">        code += <span class="title function_">current</span>();</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由上述部分可以看出,逆循环订阅方法集合,本次拼接的结果会作为下一次拼接的 onDone 或者 onResult 传入至 callTap 方法中.那就继续查看 callTap 方法.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相对应的,还是查看 &#x27;sync&#x27; 部分</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HookCodeFactory</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="title function_">callTap</span>(<span class="params">tapIndex, &#123;onError, onResult, onDone, rethrowIfPossible&#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> code = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        code += <span class="string">`var _fn<span class="subst">$&#123;tapIndex&#125;</span> = <span class="subst">$&#123;<span class="variable language_">this</span>.getTapFn(tapIndex)&#125;</span>;\n`</span>;</span><br><span class="line">        <span class="keyword">const</span> tap = <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">taps</span>[tapIndex];</span><br><span class="line">        <span class="keyword">switch</span> (tap.<span class="property">type</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;sync&quot;</span>:</span><br><span class="line">                <span class="keyword">if</span> (!rethrowIfPossible) &#123;</span><br><span class="line">                    code += <span class="string">`var _hasError<span class="subst">$&#123;tapIndex&#125;</span> = false;\n`</span>;</span><br><span class="line">                    code += <span class="string">&quot;try &#123;\n&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (onResult) &#123;</span><br><span class="line">                    code += <span class="string">`var _result<span class="subst">$&#123;tapIndex&#125;</span> = _fn<span class="subst">$&#123;tapIndex&#125;</span>(<span class="subst">$&#123;<span class="variable language_">this</span>.args(&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">                        before: tap.context ? <span class="string">&quot;_context&quot;</span> : <span class="literal">undefined</span></span></span></span><br><span class="line"><span class="subst"><span class="string">                    &#125;)&#125;</span>);\n`</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    code += <span class="string">`_fn<span class="subst">$&#123;tapIndex&#125;</span>(<span class="subst">$&#123;<span class="variable language_">this</span>.args(&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">                        before: tap.context ? <span class="string">&quot;_context&quot;</span> : <span class="literal">undefined</span></span></span></span><br><span class="line"><span class="subst"><span class="string">                    &#125;)&#125;</span>);\n`</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!rethrowIfPossible) &#123;</span><br><span class="line">                    code += <span class="string">&quot;&#125; catch(_err) &#123;\n&quot;</span>;</span><br><span class="line">                    code += <span class="string">`_hasError<span class="subst">$&#123;tapIndex&#125;</span> = true;\n`</span>;</span><br><span class="line">                    code += <span class="title function_">onError</span>(<span class="string">&quot;_err&quot;</span>);</span><br><span class="line">                    code += <span class="string">&quot;&#125;\n&quot;</span>;</span><br><span class="line">                    code += <span class="string">`if(!_hasError<span class="subst">$&#123;tapIndex&#125;</span>) &#123;\n`</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (onResult) &#123;</span><br><span class="line">                    code += <span class="title function_">onResult</span>(<span class="string">`_result<span class="subst">$&#123;tapIndex&#125;</span>`</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (onDone) &#123;</span><br><span class="line">                    code += <span class="title function_">onDone</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!rethrowIfPossible) &#123;</span><br><span class="line">                    code += <span class="string">&quot;&#125;\n&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HookCodeFactory</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="title function_">getTapFn</span>(<span class="params">idx</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`_x[<span class="subst">$&#123;idx&#125;</span>]`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此,基本可以得到结论,在 callTap 方法中,’sync’ 部分是根据有无 onResult 以及有无 onDone 来判断并拼接内容的.那最后再简化一下.</p>
<div style="display: flex;justify-content: space-between;align-items: center;">
  <div style="width: 49%;">
      <img src="https://image.white-than-wood.zone/webpack/on_result.png" alt="on_result">
  </div>
  <div style="width: 48%;">
      <img src="https://image.white-than-wood.zone/webpack/on_done.png" alt="on_done">
  </div>
</div>

<p>对于 SyncxxxHook 部分,除了循环钩子,最终得出了答案.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SyncHook,在这里都使用多参数名称、多订阅方法集合来展示最终拼接结果.</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">call</span> = <span class="keyword">function</span> <span class="title function_">lazyCompileHook</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">function</span> (<span class="params">args1, args2</span>) &#123;</span><br><span class="line">        <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> _context;</span><br><span class="line">        <span class="keyword">var</span> _x = <span class="variable language_">this</span>.<span class="property">_x</span>;</span><br><span class="line">        <span class="keyword">var</span> _fn0 = <span class="variable language_">this</span>.<span class="property">_x</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="title function_">_fn0</span>(args1, args2);</span><br><span class="line">        <span class="keyword">var</span> _fn1 = <span class="variable language_">this</span>.<span class="property">_x</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="title function_">_fn1</span>(args1, args2);</span><br><span class="line">    &#125;)(...args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SyncBailHook,在这里都使用多参数名称、多订阅方法集合来展示最终拼接结果.</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">call</span> = <span class="keyword">function</span> <span class="title function_">lazyCompileHook</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">function</span> (<span class="params">args1, args2</span>) &#123;</span><br><span class="line">        <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> _context;</span><br><span class="line">        <span class="keyword">var</span> _x = <span class="variable language_">this</span>.<span class="property">_x</span>;</span><br><span class="line">        <span class="keyword">var</span> _fn0 = <span class="variable language_">this</span>.<span class="property">_x</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> _result0 = <span class="title function_">_fn0</span>(args1, args2);</span><br><span class="line">        <span class="keyword">if</span> (_result0 !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> _result0;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> _fn1 = <span class="variable language_">this</span>.<span class="property">_x</span>[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">var</span> _result1 = <span class="title function_">_fn1</span>(args1, args2);</span><br><span class="line">            <span class="keyword">if</span> (_result1 !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> _result1;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(...args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SyncWarterfallHook,在这里都使用多参数名称、多订阅方法集合来展示最终拼接结果.</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">call</span> = <span class="keyword">function</span> <span class="title function_">lazyCompileHook</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">function</span> (<span class="params">args1, args2</span>) &#123;</span><br><span class="line">        <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> _context;</span><br><span class="line">        <span class="keyword">var</span> _x = <span class="variable language_">this</span>.<span class="property">_x</span>;</span><br><span class="line">        <span class="keyword">var</span> _fn0 = _x[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> _result0 = <span class="title function_">_fn0</span>(args1, args2);</span><br><span class="line">        <span class="keyword">if</span> (_result0 !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            args1 = _result0;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> _fn1 = _x[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">var</span> _result1 = <span class="title function_">_fn1</span>(args1, args2);</span><br><span class="line">        <span class="keyword">if</span> (_result1 !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            args1 = _result1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> args1;</span><br><span class="line">    &#125;)(...args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以此类推,异步 AsyncSeriesxxxHook 部分,除了循环钩子,调用的也都是 callTapsSeries 方法.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HookCodeFactory</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="title function_">callTapsSeries</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">                       onError,</span></span><br><span class="line"><span class="params">                       onResult,</span></span><br><span class="line"><span class="params">                       resultReturns,</span></span><br><span class="line"><span class="params">                       onDone,</span></span><br><span class="line"><span class="params">                       doneReturns,</span></span><br><span class="line"><span class="params">                       rethrowIfPossible</span></span><br><span class="line"><span class="params">                   &#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">taps</span>.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="title function_">onDone</span>();</span><br><span class="line">        <span class="keyword">const</span> firstAsync = <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">taps</span>.<span class="title function_">findIndex</span>(<span class="function"><span class="params">t</span> =&gt;</span> t.<span class="property">type</span> !== <span class="string">&quot;sync&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> somethingReturns = resultReturns || doneReturns || <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">let</span> code = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">let</span> current = onDone;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">taps</span>.<span class="property">length</span> - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">const</span> i = j;</span><br><span class="line">            <span class="keyword">if</span> (unroll) &#123;</span><br><span class="line">                code += <span class="string">`function _next<span class="subst">$&#123;i&#125;</span>() &#123;\n`</span>;</span><br><span class="line">                code += <span class="title function_">current</span>();</span><br><span class="line">                code += <span class="string">`&#125;\n`</span>;</span><br><span class="line">                current = <span class="function">() =&gt;</span> <span class="string">`<span class="subst">$&#123;somethingReturns ? <span class="string">&quot;return &quot;</span> : <span class="string">&quot;&quot;</span>&#125;</span>_next<span class="subst">$&#123;i&#125;</span>();\n`</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> done = current;</span><br><span class="line">            <span class="keyword">const</span> <span class="title function_">doneBreak</span> = skipDone =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (skipDone) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">onDone</span>();</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">const</span> content = <span class="variable language_">this</span>.<span class="title function_">callTap</span>(i, &#123;</span><br><span class="line">                <span class="attr">onError</span>: <span class="function"><span class="params">error</span> =&gt;</span> <span class="title function_">onError</span>(i, error, done, doneBreak),</span><br><span class="line">                <span class="attr">onResult</span>:</span><br><span class="line">                    onResult &amp;&amp;</span><br><span class="line">                    (<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="title function_">onResult</span>(i, result, done, doneBreak);</span><br><span class="line">                    &#125;),</span><br><span class="line">                <span class="attr">onDone</span>: !onResult &amp;&amp; done,</span><br><span class="line">                <span class="attr">rethrowIfPossible</span>:</span><br><span class="line">                    rethrowIfPossible &amp;&amp; (firstAsync &lt; <span class="number">0</span> || i &lt; firstAsync)</span><br><span class="line">            &#125;);</span><br><span class="line">            current = <span class="function">() =&gt;</span> content;</span><br><span class="line">        &#125;</span><br><span class="line">        code += <span class="title function_">current</span>();</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同理,异步 AsyncSeriesxxxHook 部分还是逆循环订阅方法集合,本次拼接的结果会作为下一次拼接的 onDone 或者 onResult 传入至 callTap 方法中,但是本次拼接的结果会加一层 next 包裹,接着还是查看 callTap 方法.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相对应的,查看 &#x27;async&#x27; 部分</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HookCodeFactory</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="title function_">callTap</span>(<span class="params">tapIndex, &#123;onError, onResult, onDone, rethrowIfPossible&#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> code = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        code += <span class="string">`var _fn<span class="subst">$&#123;tapIndex&#125;</span> = <span class="subst">$&#123;<span class="variable language_">this</span>.getTapFn(tapIndex)&#125;</span>;\n`</span>;</span><br><span class="line">        <span class="keyword">const</span> tap = <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">taps</span>[tapIndex];</span><br><span class="line">        <span class="keyword">switch</span> (tap.<span class="property">type</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;async&quot;</span>:</span><br><span class="line">                <span class="keyword">let</span> cbCode = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (onResult) cbCode += <span class="string">`(_err<span class="subst">$&#123;tapIndex&#125;</span>, _result<span class="subst">$&#123;tapIndex&#125;</span>) =&gt; &#123;\n`</span>;</span><br><span class="line">                <span class="keyword">else</span> cbCode += <span class="string">`_err<span class="subst">$&#123;tapIndex&#125;</span> =&gt; &#123;\n`</span>;</span><br><span class="line">                cbCode += <span class="string">`if(_err<span class="subst">$&#123;tapIndex&#125;</span>) &#123;\n`</span>;</span><br><span class="line">                cbCode += <span class="title function_">onError</span>(<span class="string">`_err<span class="subst">$&#123;tapIndex&#125;</span>`</span>);</span><br><span class="line">                cbCode += <span class="string">&quot;&#125; else &#123;\n&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (onResult) &#123;</span><br><span class="line">                    cbCode += <span class="title function_">onResult</span>(<span class="string">`_result<span class="subst">$&#123;tapIndex&#125;</span>`</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (onDone) &#123;</span><br><span class="line">                    cbCode += <span class="title function_">onDone</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                cbCode += <span class="string">&quot;&#125;\n&quot;</span>;</span><br><span class="line">                cbCode += <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">                code += <span class="string">`_fn<span class="subst">$&#123;tapIndex&#125;</span>(<span class="subst">$&#123;<span class="variable language_">this</span>.args(&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">                    before: tap.context ? <span class="string">&quot;_context&quot;</span> : <span class="literal">undefined</span>,</span></span></span><br><span class="line"><span class="subst"><span class="string">                    after: cbCode</span></span></span><br><span class="line"><span class="subst"><span class="string">                &#125;)&#125;</span>);\n`</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HookCodeFactory</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="title function_">getTapFn</span>(<span class="params">idx</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`_x[<span class="subst">$&#123;idx&#125;</span>]`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此,也基本可以得到结论,在 callTap 方法中,’async’ 部分是根据 onError、有无 onResult 以及有无 onDone 来判断并拼接内容的.最后也再简化一下.</p>
<div style="display: flex;justify-content: space-between;align-items: center;">
  <div style="width: 49%;">
      <img src="https://image.white-than-wood.zone/webpack/async_on_result.png" alt="async_on_result">
  </div>
  <div style="width: 49%;">
      <img src="https://image.white-than-wood.zone/webpack/async_on_done.png" alt="async_on_done">
  </div>
</div>

<p>对于异步 AsyncSeriesxxxHook 部分,除了循环钩子,最终也得出了答案.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AsyncSeriesHook,在这里都使用多参数名称、多异步订阅方法集合来展示最终拼接结果.</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">callAsync</span> = <span class="keyword">function</span> <span class="title function_">lazyCompileHook</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">function</span> (<span class="params">args1, args2, _callback</span>) &#123;</span><br><span class="line">        <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> _context;</span><br><span class="line">        <span class="keyword">var</span> _x = <span class="variable language_">this</span>.<span class="property">_x</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">_next0</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> _fn1 = _x[<span class="number">1</span>];</span><br><span class="line">            <span class="title function_">_fn1</span>(args1, args2, <span class="function">(<span class="params">_err1</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (_err1) &#123;</span><br><span class="line">                    <span class="title function_">_callback</span>(_err1);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">_callback</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">var</span> _fn0 = _x[<span class="number">0</span>];</span><br><span class="line">        <span class="title function_">_fn0</span>(args1, args2, <span class="function">(<span class="params">_err0</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (_err0) &#123;</span><br><span class="line">                <span class="title function_">_callback</span>(_err0);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">_next0</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)(...args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AsyncSeriesBailHook,在这里都使用多参数名称、多异步订阅方法集合来展示最终拼接结果.</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">callAsync</span> = <span class="keyword">function</span> <span class="title function_">lazyCompileHook</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">function</span> (<span class="params">args1, args2, _callback</span>) &#123;</span><br><span class="line">        <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> _context;</span><br><span class="line">        <span class="keyword">var</span> _x = <span class="variable language_">this</span>.<span class="property">_x</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">_next0</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> _fn1 = _x[<span class="number">1</span>];</span><br><span class="line">            <span class="title function_">_fn1</span>(args1, args2, <span class="function">(<span class="params">_err1, _result1</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (_err1) &#123;</span><br><span class="line">                    <span class="title function_">_callback</span>(_err1);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (_result1 !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                        <span class="title function_">_callback</span>(<span class="literal">null</span>, _result1);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title function_">_callback</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">var</span> _fn0 = _x[<span class="number">0</span>];</span><br><span class="line">        <span class="title function_">_fn0</span>(args1, args2, <span class="function">(<span class="params">_err0, _result0</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (_err0) &#123;</span><br><span class="line">                <span class="title function_">_callback</span>(_err0);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (_result0 !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                    <span class="title function_">_callback</span>(<span class="literal">null</span>, _result0);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">_next0</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)(...args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AsyncSeriesWaterfallHook,在这里都使用多参数名称、多异步订阅方法集合来展示最终拼接结果.</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">callAsync</span> = <span class="keyword">function</span> <span class="title function_">lazyCompileHook</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">function</span> (<span class="params">args1, args2, _callback</span>) &#123;</span><br><span class="line">        <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> _context;</span><br><span class="line">        <span class="keyword">var</span> _x = <span class="variable language_">this</span>.<span class="property">_x</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">_next0</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> _fn1 = _x[<span class="number">1</span>];</span><br><span class="line">            <span class="title function_">_fn1</span>(args1, args2, <span class="function">(<span class="params">_err1, _result1</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (_err1) &#123;</span><br><span class="line">                    <span class="title function_">_callback</span>(_err1);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (_result1 !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                        args1 = _result1;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="title function_">_callback</span>(<span class="literal">null</span>, args1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">var</span> _fn0 = _x[<span class="number">0</span>];</span><br><span class="line">        <span class="title function_">_fn0</span>(args1, args2, <span class="function">(<span class="params">_err0, _result0</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (_err0) &#123;</span><br><span class="line">                <span class="title function_">_callback</span>(_err0);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (_result0 !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                    args1 = _result0;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="title function_">_next0</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)(...args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样,Promise AsyncSeriesxxxHook 部分,除了循环钩子,调用的也都是 callTapsSeries 方法,而 callTap 方法则依然是逆循环订阅方法集合,本次拼接的结果会作为下一次拼接的 onDone 或者 onResult 传入其中,最大的不同就是相对于异步来说结构有了比较大的改变.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查看 &#x27;promise&#x27; 部分</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HookCodeFactory</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="title function_">callTap</span>(<span class="params">tapIndex, &#123;onError, onResult, onDone, rethrowIfPossible&#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> code = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        code += <span class="string">`var _fn<span class="subst">$&#123;tapIndex&#125;</span> = <span class="subst">$&#123;<span class="variable language_">this</span>.getTapFn(tapIndex)&#125;</span>;\n`</span>;</span><br><span class="line">        <span class="keyword">const</span> tap = <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">taps</span>[tapIndex];</span><br><span class="line">        <span class="keyword">switch</span> (tap.<span class="property">type</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;promise&quot;</span>:</span><br><span class="line">                code += <span class="string">`var _hasResult<span class="subst">$&#123;tapIndex&#125;</span> = false;\n`</span>;</span><br><span class="line">                code += <span class="string">`var _promise<span class="subst">$&#123;tapIndex&#125;</span> = _fn<span class="subst">$&#123;tapIndex&#125;</span>(<span class="subst">$&#123;<span class="variable language_">this</span>.args(&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">                    before: tap.context ? <span class="string">&quot;_context&quot;</span> : <span class="literal">undefined</span></span></span></span><br><span class="line"><span class="subst"><span class="string">                &#125;)&#125;</span>);\n`</span>;</span><br><span class="line">                code += <span class="string">`if (!_promise<span class="subst">$&#123;tapIndex&#125;</span> || !_promise<span class="subst">$&#123;tapIndex&#125;</span>.then)\n`</span>;</span><br><span class="line">                code += <span class="string">`  throw new Error(&#x27;Tap function (tapPromise) did not return promise (returned &#x27; + _promise<span class="subst">$&#123;tapIndex&#125;</span> + &#x27;)&#x27;);\n`</span>;</span><br><span class="line">                code += <span class="string">`_promise<span class="subst">$&#123;tapIndex&#125;</span>.then(_result<span class="subst">$&#123;tapIndex&#125;</span> =&gt; &#123;\n`</span>;</span><br><span class="line">                code += <span class="string">`_hasResult<span class="subst">$&#123;tapIndex&#125;</span> = true;\n`</span>;</span><br><span class="line">                <span class="keyword">if</span> (onResult) &#123;</span><br><span class="line">                    code += <span class="title function_">onResult</span>(<span class="string">`_result<span class="subst">$&#123;tapIndex&#125;</span>`</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (onDone) &#123;</span><br><span class="line">                    code += <span class="title function_">onDone</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                code += <span class="string">`&#125;, _err<span class="subst">$&#123;tapIndex&#125;</span> =&gt; &#123;\n`</span>;</span><br><span class="line">                code += <span class="string">`if(_hasResult<span class="subst">$&#123;tapIndex&#125;</span>) throw _err<span class="subst">$&#123;tapIndex&#125;</span>;\n`</span>;</span><br><span class="line">                code += <span class="title function_">onError</span>(<span class="string">`_err<span class="subst">$&#123;tapIndex&#125;</span>`</span>);</span><br><span class="line">                code += <span class="string">&quot;&#125;);\n&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HookCodeFactory</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="title function_">getTapFn</span>(<span class="params">idx</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`_x[<span class="subst">$&#123;idx&#125;</span>]`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>又可以得出结论,在 callTap 方法中,’promise’ 部分是根据 onError、有无 onResult 以及有无 onDone 来判断并拼接内容的.最后也再简化一下.</p>
<div style="display: flex;justify-content: space-between;align-items: center;">
    <div style="width: 49%;">
        <img src="https://image.white-than-wood.zone/webpack/promise_on_result.png" alt="promise_on_result">
    </div>
    <div style="width: 49%;">
        <img src="https://image.white-than-wood.zone/webpack/promise_on_done.png" alt="promise_on_done">
    </div>
</div>

<p>对于 Promise AsyncSeriesxxxHook 部分,除了循环钩子,最终得出了答案.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AsyncSeriesHook,在这里都使用多参数名称、多 Promise 订阅方法集合来展示最终拼接结果.</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">promise</span> = <span class="keyword">function</span> <span class="title function_">lazyCompileHook</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">function</span> (<span class="params">args1, args2</span>) &#123;</span><br><span class="line">        <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">_resolve, _reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> _sync = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">_error</span>(<span class="params">_err</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (_sync)</span><br><span class="line">                    <span class="title function_">_resolve</span>(<span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="keyword">throw</span> _err));</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="title function_">_reject</span>(_err);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> _context;</span><br><span class="line">            <span class="keyword">var</span> _x = <span class="variable language_">this</span>.<span class="property">_x</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">_next0</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> _fn1 = _x[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> _hasResult1 = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">var</span> _promise1 = <span class="title function_">_fn1</span>(args1, args2);</span><br><span class="line">                <span class="keyword">if</span> (!_promise1 || !_promise1.<span class="property">then</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Tap function (tapPromise) did not return promise (returned &#x27;</span> + _promise1 + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">                _promise1.<span class="title function_">then</span>(<span class="function"><span class="params">_result1</span> =&gt;</span> &#123;</span><br><span class="line">                    _hasResult1 = <span class="literal">true</span>;</span><br><span class="line">                    <span class="title function_">_resolve</span>();</span><br><span class="line">                &#125;, <span class="function"><span class="params">_err1</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (_hasResult1) <span class="keyword">throw</span> _err1;</span><br><span class="line">                    <span class="title function_">_error</span>(_err1);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> _fn0 = _x[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">var</span> _hasResult0 = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">var</span> _promise0 = <span class="title function_">_fn0</span>(args1, args2);</span><br><span class="line">            <span class="keyword">if</span> (!_promise0 || !_promise0.<span class="property">then</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Tap function (tapPromise) did not return promise (returned &#x27;</span> + _promise0 + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            _promise0.<span class="title function_">then</span>(<span class="function"><span class="params">_result0</span> =&gt;</span> &#123;</span><br><span class="line">                _hasResult0 = <span class="literal">true</span>;</span><br><span class="line">                <span class="title function_">_next0</span>();</span><br><span class="line">            &#125;, <span class="function"><span class="params">_err0</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (_hasResult0) <span class="keyword">throw</span> _err0;</span><br><span class="line">                <span class="title function_">_error</span>(_err0);</span><br><span class="line">            &#125;);</span><br><span class="line">            _sync = <span class="literal">false</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)(...args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AsyncSeriesBailHook,在这里都使用多参数名称、多 Promise 订阅方法集合来展示最终拼接结果.</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">promise</span> = <span class="keyword">function</span> <span class="title function_">lazyCompileHook</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">function</span> (<span class="params">args1, args2</span>) &#123;</span><br><span class="line">        <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">_resolve, _reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> _sync = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">_error</span>(<span class="params">_err</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (_sync)</span><br><span class="line">                    <span class="title function_">_resolve</span>(<span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> _err;</span><br><span class="line">                    &#125;));</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="title function_">_reject</span>(_err);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> _context;</span><br><span class="line">            <span class="keyword">var</span> _x = <span class="variable language_">this</span>.<span class="property">_x</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">_next0</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> _fn1 = _x[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> _hasResult1 = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">var</span> _promise1 = <span class="title function_">_fn1</span>(args1, args2);</span><br><span class="line">                <span class="keyword">if</span> (!_promise1 || !_promise1.<span class="property">then</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Tap function (tapPromise) did not return promise (returned &#x27;</span> + _promise1 + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                _promise1.<span class="title function_">then</span>(<span class="function"><span class="params">_result1</span> =&gt;</span> &#123;</span><br><span class="line">                    _hasResult1 = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span> (_result1 !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                        <span class="title function_">_resolve</span>(_result1);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title function_">_resolve</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="function"><span class="params">_err1</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (_hasResult1) <span class="keyword">throw</span>  _err1;</span><br><span class="line">                    <span class="title function_">_error</span>(_err1);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> _fn0 = _x[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">var</span> _hasResult0 = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">var</span> _promise0 = <span class="title function_">_fn0</span>(args1, args2);</span><br><span class="line">            <span class="keyword">if</span> (!_promise0 || !_promise0.<span class="property">then</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Tap function (tapPromise) did not return promise (returned &#x27;</span> + _promise0 + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            _promise0.<span class="title function_">then</span>(<span class="function"><span class="params">_result0</span> =&gt;</span> &#123;</span><br><span class="line">                _hasResult0 = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (_result0 !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                    <span class="title function_">_resolve</span>(_result0);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">_next0</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="function"><span class="params">_err0</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (_hasResult0) <span class="keyword">throw</span>  _err0;</span><br><span class="line">                <span class="title function_">_error</span>(_err0);</span><br><span class="line">            &#125;);</span><br><span class="line">            _sync = <span class="literal">false</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)(...args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AsyncSeriesWaterfallHook,在这里都使用多参数名称、多 Promise 订阅方法集合来展示最终拼接结果.</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">promise</span> = <span class="keyword">function</span> <span class="title function_">lazyCompileHook</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">function</span> (<span class="params">args1, args2</span>) &#123;</span><br><span class="line">        <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">_resolve, _reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> _sync = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">_error</span>(<span class="params">_err</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (_sync)</span><br><span class="line">                    <span class="title function_">_resolve</span>(<span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> _err;</span><br><span class="line">                    &#125;));</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="title function_">_reject</span>(_err);</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">var</span> _context;</span><br><span class="line">            <span class="keyword">var</span> _x = <span class="variable language_">this</span>.<span class="property">_x</span>;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">_next0</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> _fn1 = _x[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> _hasResult1 = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">var</span> _promise1 = <span class="title function_">_fn1</span>(args1, args2);</span><br><span class="line">                <span class="keyword">if</span> (!_promise1 || !_promise1.<span class="property">then</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Tap function (tapPromise) did not return promise (returned &#x27;</span> + _promise1 + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">                _promise1.<span class="title function_">then</span>(<span class="function"><span class="params">_result1</span> =&gt;</span> &#123;</span><br><span class="line">                    _hasResult1 = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span> (_result1 !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                        args1 = _result1;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="title function_">_resolve</span>(args1);</span><br><span class="line">                &#125;, <span class="function"><span class="params">_err1</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (_hasResult1) <span class="keyword">throw</span> _err1;</span><br><span class="line">                    <span class="title function_">_error</span>(_err1);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">var</span> _fn0 = _x[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">var</span> _hasResult0 = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">var</span> _promise0 = <span class="title function_">_fn0</span>(args1, args2);</span><br><span class="line">            <span class="keyword">if</span> (!_promise0 || !_promise0.<span class="property">then</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Tap function (tapPromise) did not return promise (returned &#x27;</span> + _promise0 + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            _promise0.<span class="title function_">then</span>(<span class="function"><span class="params">_result0</span> =&gt;</span> &#123;</span><br><span class="line">                _hasResult0 = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (_result0 !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                    args1 = _result0;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="title function_">_next0</span>();</span><br><span class="line">            &#125;, <span class="function"><span class="params">_err0</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (_hasResult0) <span class="keyword">throw</span> _err0;</span><br><span class="line">                <span class="title function_">_error</span>(_err0);</span><br><span class="line">            &#125;);</span><br><span class="line">            _sync = <span class="literal">false</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)(...args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>tapable</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript outline</title>
    <url>/2022/10/25/javascript-outline/</url>
    <content><![CDATA[<h1 id="var"><a href="#var" class="headerlink" title="var"></a>var</h1><ul>
<li>变量提升</li>
<li>重复声明</li>
<li>全局作用域绑定</li>
</ul>
<h1 id="let、const"><a href="#let、const" class="headerlink" title="let、const"></a>let、const</h1><ul>
<li>不再拥有 var 的缺陷特性</li>
<li>TDZ(临时死区)</li>
<li>块级作用域绑定</li>
</ul>
<h1 id="let"><a href="#let" class="headerlink" title="let"></a>let</h1><ul>
<li>变量声明</li>
</ul>
<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><ul>
<li>常量声明</li>
<li>优先声明最佳实践</li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>es6</tag>
        <tag>outline</tag>
      </tags>
  </entry>
</search>
